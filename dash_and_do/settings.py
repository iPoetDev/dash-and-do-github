"""Django Base Settings for dash_and_do project.
# pylint: disable=too-many-lines,C0302
# noqa: disable=too-many-lines
Generated by 'django-admin startproject' using Django 4.2.3. (LTS)

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/

Changelog:
2023-08-09
- Added `sys` for appending apps to base directory.
- Added `environ` for django-environ & environmental variables.
- Added apps to `INSTALLED_APPS` for v0.5, v1.0
- Added `django_environ` for .env file support.
- Updated BASE_DIR to search: 2 to 3 parents: for Setting folder
- Updated: Template Base Directory + project templates to search.
- Updated: Canonical values added from.env as per 12 Factor.Config
- Notes: Used env() to markup custom values for env variables & canonical
- Notes: env(var, default=) for default values, not stored in .env file.
values.

2023-08-16
- Added: contact development.py settings to settings.py so to
 pass 'manage.py check'
- Note: Checks causing errors
- Removed: Debug in Templates - Follow up and find right position
- TODO: Move Development Settings to development.py
- TODO: Test Manage.py and Check against moved development.py.
- Note: For now, just go to move on and get admin site running.
"""

#  Copyright (c) 2023.

# ================== Imports ==================
# -added: sys for appending apps to base directory.
# -added: environ for django-environ & environmental variables.

# System Library
import os
from pathlib import Path
# Third Party
# import django_behave
from environ import Env
# Djnago Library
from django.contrib.messages import constants as messages
# Local Library
from .thirdparty import ANYMAIL  # noqa

# ==================== Third Party ===============
# - added: third party settings for Settings.py

# ================== Base Paths ==================
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# -added: Extended BASE DIR TO 3 parents for settings folder.

# BASE_DIR = Path(__file__).resolve().parent.parent.parent
BASE_DIR = Path(__file__).resolve().parent.parent
# ================== Project Structure ==================
# Project Structure: Top Level Refactoring / Applications Grouping
# Adds additional new sources root directory.
# Benefits to this:
# a) reference to apps by name in INSTALLED_APPS.
# b) Grouping apps in own directory.

# ================== Environment Variables ==================
# - added: Read the .env file
# - added: Read the .emailing file from emailing configuration
# - note: Assign the values from the .env & .emailing variables

envs = Env()
env_file = os.path.join(BASE_DIR, '.env')
envs.read_env(env_file)

emailenv = Env()
emailenv_file = os.path.join(BASE_DIR, '.email')
emailenv.read_env(emailenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# ================== Key & Mode *SECURITY WARNING* =================
# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key
# - added: SECRET_KEY from .env file
# - added: DEBUG from .env file
# - added: SECRET_KEY_FALLBACKS

SECRET_KEY = \
    envs.str('SECRET_KEY')

# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key-fallbacks
SECRET_KEY_FALLBACKS = [ ]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = \
    envs.bool('DEBUG')
TEMPLATE_DEBUG = \
    envs.bool('TEMPLATE_DEBUG', default=DEBUG)
ADMIN_ENABLED = \
    envs.bool('ADMIN_ENABLED', default=DEBUG)

if DEBUG:
    # pylint: disable=import-outside-toplevel,ungrouped-imports
    import warnings
    from django.utils.deprecation import RemovedInDjango50Warning

    warnings.simplefilter('ignore', RemovedInDjango50Warning)

# ================== Server & Hosting ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#wsgi-application
# - added: default charset to utf-8.
# - added: PREPEND_WWW & APPEND_SLASH to False
# - added: X_FRAME_OPTIONS to DENY

# noinspection PyUnusedName
WSGI_APPLICATION = 'dash_and_do.wsgi.application'

ALLOWED_HOSTS = [ 'localhost', '127.0.0.1' ]

ROOT_URLCONF = 'dash_and_do.urls'

# Per HTTP Requests
DEFAULT_CHARSET = \
    envs.str('DEFAULT_CHARSET', default='utf-8')

# Only Used in debug CommonMiddleware installed.
PREPEND_WWW = \
    envs.bool('PREPEND_WWW', default=False)
APPEND_SLASH = \
    envs.bool('APPEND_SLASH', default=False)

# +https://docs.djangoproject.com/en/4.2/ref/settings/#x-frame-options
# X_FRAME_OPTIONS = \
envs.str('X_FRAME_OPTIONS', default='DENY')

# ================== Dev Server & Hosting ==================
if DEBUG:
    DEBUG_PROPAGATE_EXCEPTIONS = \
        envs.bool('DJANGO_DEBUG_PROPAGATE_EXCEPTIONS', default=True)

# ================== Debugging & Internal IP ==================
# - added: ALLOWED_HOSTS for localhost resources
#   - https://www.perplexity.ai/search/79db4ade-4c37-436d-9bec-940c7884d8ae?s=c
#   - https://docs.djangoproject.com/en/4.2/ref/settings/#internal-ips
# - added: Internal IPs
# - commented: ALLOWED_HOSTS CIDrs via IPRangeLists/IPTools - throws error

if DEBUG:
    ALLOWED_HOSTS += [ 'localhost', '127.0.0.1' ]
    INTERNAL_IPS = [ '127.0.0.1' ]
    # INTERNAL_IPS = IpRangeList(['127.0.0.1/24', '192.168.0.0/16'])

if not DEBUG:
    ALLOWED_HOSTS += [ '*.herokuapp.com' ]

# ================== Application ==================
INSTALLED_APPS = [ ]
DEVELOPMENT_APPS = [ ]
THIRDPARTY_APPS = [ ]
DJANGO_APPS = [ ]

# Application definition
# - Updated: Added developer apps to `INSTALLED_APPS`
# - Added: Admin Docker app
# - Note: Excluded from base & production settings
# - Noted: add the “Documentation” link in the upper right of the page.
# - https://docs.djangoproject.com/en/4.2/ref/contrib/admin/admindocs/

if ADMIN_ENABLED:
    INSTALLED_APPS = [ ]

# ================== Application ==================
# Application definition
# - Updated: Added apps to `INSTALLED_APPS`
# - Updated: Added `django.contrib.humanize` for humanize template tags
# - Moved: `django.contrib.admin` to development.py under ADMIN_ENABLED check
# - Check for: Admin  dependencies Auth, ContentTypes, Messages, Sessions
# - Check for: Debugging Toolbar for: staticfiles
# - added: allauth & allauth.account
# - todo: add: allauth.socialaccount
# - added: anymail for allauth emailing backend
# - added: mail_templated for emailing templates & sending
# - added: widget_tweaks for forms field templates
# - refactored: INSTALLED_APPS into 3 groups: Django, ThirdParty, Development
# - added: `debug_toolbar` for debugging
# - added: `django_behave` for BDD testing


INSTALLED_APPS += [
    'debug_toolbar',
    'djdt_permissions',
    # 'mail_panel',
    'allauth',  # django-allauth
    'allauth.account',  # allauth.account
    'allauth.socialaccount',  # allauth.socialaccount
    'allauth.socialaccount.providers.github',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.humanize',
]

THIRDPARTY_APPS += [
    'rest_framework',
    # 'autocomplete', #django-htmx-autocomplete
    'corsheaders',  # django-cors-headers
    'anymail',  # django-anymail
    'mail_templated',  # django-mail-templated
    'widget_tweaks',  # django-widget-tweaks
    'django_htmx',  # django-htmx
]

if DEBUG:
    DEVELOPMENT_APPS += [
        'django.contrib.admindocs',
        'django_extensions',
        'django_behave',
        'debug_toolbar_user_panel',
    ]

DJANGO_APPS += [
    # Customization with env variables for canonical values.
    envs.str('KORE_APP'),
    envs.str('USERS_APP'),
    # envs.str('PROFILE_APP',default='apps.profile'),
    # envs.str('DASH_APP',default='apps.dash'),
]

print(f'INSTALLED_APPS: {DJANGO_APPS}')
print(envs.str('KORE_APP'))

# Integrate apps into INSTALLED_APPS
INSTALLED_APPS += DEVELOPMENT_APPS
INSTALLED_APPS += THIRDPARTY_APPS
INSTALLED_APPS += DJANGO_APPS

# ================== Debug Toolbar ==================
# https://django-debug-toolbar.readthedocs.io

if DEBUG:
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        # 'djt_nvu.panel.W3ValidatorPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        "mail_panel.panels.MailToolbarPanel",
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        # 'debug_toolbar.panels.signals.SignalsPanel',
        'djt_csp.panel.SecurityPanel',
        # 'debug_toolbar_user_panel.panels.UserPanel',
        # 'debug_toolbar.panels.versions.VersionsPanel',
        # 'debug_toolbar.panels.timer.TimerPanel',
        # 'djdt_permissions.panels.PermissionsPanel',
        # 'debug_toolbar.panels.sql.SQLPanel',
        # 'debug_toolbar.panels.cache.CachePanel',
        # 'debug_toolbar.panels.profiling.ProfilingPanel',
    ]

    # https://github.com/d9pouces/djt_nvu
    DJT_NVU_URL = "https://html5.validator.nu/"

    DEBUG_TOOLBAR_CONFIG = {
        'INSERT_BEFORE': '</body>',
        'RENDER_PANELS': False,
        'RESULTS_CACHE_SIZE': 150,
        'ROOT_TAG_EXTRA_ATTRS': 'hx-preserve',
        'SHOW_COLLAPSED': True,
        'SHOW_TOOLBAR_CALLBACK': 'debug_toolbar.middleware.show_toolbar',
        'OBSERVE_REQUEST_CALLBACK': 'debug_toolbar.toolbar.observe_request',
        # panel options
        'EXTRA_SIGNALS': [ ],
        'ENABLE_STACKTRACES': True,
        'ENABLE_STACKTRACES_LOCALS': True,
        'HIDE_IN_STACKTRACES': (),
        'PRETTIFY_SQL': True,
        'PROFILER_CAPTURE_PROJECT_CODE': True,
        'PROFILER_MAX_DEPTH': 10,
        # 'PROFILER_THRESHOLD_RATIO': 8,
        'SHOW_TEMPLATE_CONTEXT': True,
        'SKIP_TEMPLATE_PREFIXES': ('django/forms/widgets/', 'admin/widgets/'),
        # 'SQL_WARNING_THRESHOLD': 500,
    }

# ================== Django DebugTools ==================
# https://github.com/edoburu/django-debugtools

# ================== Checks ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#silenced-system-checks
# - added: Silenced System Checks
# - check: to add:

if DEBUG:
    SILENCED_SYSTEM_CHECKS = \
        envs.list('DJANGO_SILENCED_SYSTEM_CHECKS',
                  default=[ ])

# ================== Middleware ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#middleware
# - added: Add BrokenLinkEmailsMiddleware with correct string for 404 Errors
# - added: AdminDocsMiddleware  bookmarklets
# - Check for: Admin dependencies Authentication, Message

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'mail_panel.panels.MailToolbarPanel',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_htmx.middleware.HtmxMiddleware',  # third party
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # checked
    'allauth.account.middleware.AccountMiddleware',  # third party
    'django.contrib.messages.middleware.MessageMiddleware',  # checked
    'django.contrib.admindocs.middleware.XViewMiddleware',  # checked
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ================== Dev Middleware ==================
# - : Debug Toolbar
# - added: Broken Link Email Middleware (Moved from production or base settings)
# - added: AllowCIDR Middleware
#   - normal ALLOWED_HOSTS values will also work as intended.
#   - This Middleware is intended to augment, not replace,

if DEBUG:
    MIDDLEWARE += [
        # 'debug_toolbar.middleware.DebugToolbarMiddleware',
        'django.middleware.common.BrokenLinkEmailsMiddleware',
        'allow_cidr.middleware.AllowCIDRMiddleware',
    ]

# ==================DEBUG CACHE ==================
if DEBUG:
    # Use for django. MailPanel
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

# ================== DEV CIDR LOCALHOST ==================
# - added: AllowCIDR Middleware

# noinspection PyUnusedName
ALLOWED_CIDR_NETS = [ '192.168.0.0/16' ]

# ================== Templates ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#templates
# - Added templates path to `TEMPLATES` DIRS:
# - Added templates NAME as alias for DjangoTemplates
# - ADR: Select between DjangoTemplates or Jinja2. Do not use a custom backend
# - added: DEBUG for Templates
# - Check for: Admin dependencies/OPTIONS: requests, auth, messages
# - Check for: Debugging Toolbar for: DjangoTemplates
# - Check for: DjangoTemplates AllAuth dependencies: requests

TEMPLATES = [
    {

        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'BACKEND': 'django.template.backends.jinja.Jinja2',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'apps/kore/templates/kore/',
            BASE_DIR / 'apps/users/templates/users/',
            'venv/Lib/site-packages/debug_toolbar/templates/debug_toolbar/',
            # BASE_DIR / 'apps/profile/templates/profile',
            # BASE_DIR / 'apps/dash/templates/dash',
        ],
        'APP_DIRS': envs.bool('TEMPLATES_APP_DIRS', default=True),
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # allauth
                'django.template.context_processors.csrf',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.tz',  # checked
                'django.template.context_processors.static',
                'django.template.context_processors.media',
                'django.contrib.messages.context_processors.messages',  # check
            ],
            'libraries': {},
            'string_if_invalid': 'Invalid Template: %s',
        },
    },
]
# https://docs.djangoproject.com/en/4.2/ref/templates/api/

# =================== Migrations ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#migration-modules
#  If MIGRATION_MODULES is used in your general project settings,
#  remember to use the `migrate --run-syncdb` option if you want to create
#  tables for the app.
# - added: MIGRATION_MODULES for each app
# - removed: MIGRATION_MODULES for dash app,
# - removed: MIGRATION_MODULES for profile app on epic-kore branch

MIGRATION_MODULES = {
    'kore': 'kore.migrations',
    # 'profile': 'profile.migrations',
    # 'dash': 'dash.migrations',
}

# ================== Database ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Development Database moved to development.py
# Production Database moved to production.py
# - added: Site_Id for Databases tables

# ================== Database ==================
# Note: Test for developer only settings

if DEBUG and ADMIN_ENABLED:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'dash.sqlite3',
        }
    }

SITE_ID = \
    envs.int('SITE_ID', default=1)

# https://docs.djangoproject.com/en/4.2/topics/db/tablespaces/
DEFAULT_TABLESPACE = \
    envs.str('DEFAULT_TABLESPACE', default='')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================== Auth Redirects ==================

LOGIN_REDIRECT_URL = \
    envs.str('LOGIN_REDIRECT_URL', default='/')
LOGIN_URL = \
    envs.str('LOGIN_URL', default='/')
LOGOUT_REDIRECT_URL = \
    envs.str('LOGOUT_REDIRECT_URL', default='/')

# ================== AllAuth Redirects ==================

# from django.urls import reverse_lazy
#
# LOGIN_URL = reverse_lazy('account_login')
# LOGOUT_URL = reverse_lazy('account_logout')
# LOGIN_REDIRECT_URL = reverse_lazy('home')

# ================== Authentication ==================
# https://docs.djangoproject.com/en/4.2/topics/auth/#module-django.contrib.auth
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# - ADR: Use default Django Authentication or Custom User Model
# - added: AUTH_USER_MODEL
# - added: AUTHENTICATION_BACKENDS
#   - added: allauth for Authentication
#   - Noted: https://django-allauth.readthedocs.io/en/latest/installation.html
# - added: AUTH_PASSWORD_VALIDATORS
#   - added: User Attribute Similarity
#   - added: Minimum Length
#   - added: Common Passwords
#   - added: Numeric Passwords
# - added: PASSWORD_RESET_TIMEOUT to 15 minutes
# - added: PASSWORD_HASHERS

# https://docs.djangoproject.com/en/4.2/topics/auth/customizing
# /#authentication-backends # noqa
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    # 'google': {
    #     # For each OAuth based provider, either add a ``SocialApp``
    #     # (``socialaccount`` app) containing the required client
    #     # credentials, or list them here:
    #     'APP': {
    #         'client_id': '123',
    #         'secret': '456',
    #         'key': ''
    #     }
    # }
}

AUTH_USER_MODEL = \
    envs.str('AUTH_USER_MODEL', default='users.DashUser')

# IssueLog: 2023-08-16
# - todo:     raise ImproperlyConfigured(msg % validator["NAME"])
# django.core.exceptions.ImproperlyConfigured:
# The module in NAME could not be imported: django.contrib.auth.pass
# word_validation.UserAttributeSimilarityValidator.
# Check your AUTH_PASSWORD_VALIDATORS setting
# - check: commented out for now

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.\
    #             password_validation'
    #             '.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.NumericPasswordValidator',
    # },
]

# Timeout: Default 900 seconds (15 minutes), for PasswordResetConfirmView.
PASSWORD_RESET_TIMEOUT = \
    envs.int('PASSWORD_RESET_TIMEOUT', default=900)

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# ================== Django AllAuth ==================
# ChangeLog: 2023-08-10:  Comment Out when not implemented
# - added: allauth for Authentication contact Configurations explicitly
#   - added: Adapter, Redirects Behaviour, Authentication Methods, Templates
#   - added: Forms & Signup, Account Email, Account Protocols,
#   - added: Email Confirmation, Login Attempts, Logout, Sessions Invalidation
#   - added: Account Input Rendering, Account Security, Account Users
#   - added: allauth for Social contact Configurations explicitly
#   - added: Adapter, Signup, Email Verification, Forms, Login, Query Email
#   - adr: Store Tokens: Select token store in database or not
#   - adr: Use email only, no username for authentication
#   - adr: Use custom user model for authentication
# - noted: Excluded any custom user models settings

# Add the following adapter class to use
ACCOUNT_ADAPTER = \
    'allauth.account.adapter.DefaultAccountAdapter'  # checked 23/09/23

# Change the default behavior of authenticated users being redirected
# to LOGIN_REDIRECT_URL
# noinspection PyUnusedName
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True  # checked 23/09/23
# Specifies the login method to use: username, emailing, or username_email
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # checked 23/09/25
# noinspection PyUnusedName
ACCOUNT_CONFIRM_EMAIL_ON_GET = False  # checked 23/09/23
# Multiple Emails. Max 1
ACCOUNT_CHANGE_EMAIL = False  # checked 23/09/23
# Template
# noinspection PyUnusedName
ACCOUNT_TEMPLATE_EXTENSION = 'html'  # checked 23/09/23

# Signup
# noinspection PyUnusedName
ACCOUNT_FORMS = {
    'signup': 'allauth.account.forms.SignupForm',  # highprior
    'login': 'allauth.account.forms.LoginForm',  # highprior
    'reset_password': 'allauth.account.forms.ResetPasswordForm',  # lowprior
    'change_password': 'allauth.account.forms.ChangePasswordForm',  # lowprior
}
# noinspection PyUnusedName
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False
# noinspection PyUnusedName
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
# noinspection PyUnusedName
ACCOUNT_SIGNUP_FORM_CLASS = ''  # DON'T: RISK OF CYCLIC IMPORTS
ACCOUNT_SIGNUP_REDIRECT_URL = LOGIN_URL

# Account Email
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = True  # checked 23/09/23
# E-mail verification method during signup: none, optional, mandatory
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # checked 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Dash & Do] '  # checked 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_MAX_LENGTH = 254  # checked 23/09/24
# noinspection PyUnusedName
ACCOUNT_MAX_EMAIL_ADDRESSES = 1  # checked 23/09/24

# The URL Protocol to use when generating links in activation emails
# noinspection PyUnusedName
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'  # checked 23/09/23

# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = \
    LOGIN_URL  # checked 23/09/23
# 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = None
# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # checked 23/09/23
ACCOUNT_EMAIL_CONFIRMATION_HMAC = False  # checked 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180  # checked 23/09/24

# noinspection PyUnusedName
if DEBUG:
    ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 10
else:
    ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# noinspection PyUnusedName
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
# noinspection PyUnusedName
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# If the ON GET is true, = dangerous
# noinspection PyUnusedName
ACCOUNT_LOGOUT_ON_GET = False
# Sessions Invalidation
# https://docs.djangoproject.com/en/stable/topics/auth/default/
# #session-invalidation-on-password-change
# noinspection PyUnusedName
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# noinspection PyUnusedName
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False
# noinspection PyUnusedName
ACCOUNT_LOGOUT_REDIRECT_URL = LOGIN_URL

# Account Input Rendering
# noinspection PyUnusedName
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = False
# noinspection PyUnusedName
ACCOUNT_PRESERVE_USERNAME_CASING = False

# Account Secuity
# noinspection PyUnusedName
ACCOUNT_PREVENT_ENUMERATION = True
# ACCOUNT_RATE_LIMITS: Out of the box various rate limits are in place.
# noinspection PyUnusedName
ACCOUNT_SESSION_REMEMBER = None

# Account Users
# ACCOUNT_USER_DISPLAY = lambda user: user.username
# noinspection PyUnusedName
ACCOUNT_USERNAME_MIN_LENGTH = 6
ACCOUNT_USERNAME_REQUIRED = False  # checked 23/09/28
# noinspection PyUnusedName
ACCOUNT_USERNAME_BLACKLIST = [ ]

# noinspection PyUnusedName
ACCOUNT_USERNAME_VALIDATORS = [ ]

# Account Custom Models
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'  # checked 23/09/28
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # checked 23/09/28

# ================== Django AllAuth Social ==================

# SOCIALACCOUNT_ADAPTER =\
#     'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'
# SOCIALACCOUNT_AUTO_SIGNUP = False
# SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
# SOCIALACCOUNT_EMAIL_REQUIRED = ACCOUNT_EMAIL_REQUIRED
# SOCIALACCOUNT_FORMS = {}
# SOCIALACCOUNT_LOGIN_ON_GET = False
# SOCIALACCOUNT_PROVIDERS = {
#     "github": {
#         # For each provider, you can choose whether or not the
#         # emailing address(es) retrieved from the provider are to be
#         # interpreted as verified.
#         "VERIFIED_EMAIL": True
#     },
# }
# SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED
# Store in Database for Authentication Queries. No custom model?
# SOCIALACCOUNT_STORE_TOKENS = True

# ================== Internationalization & Formats ==================
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# - ADR: Select L10N or DATE Format Used
# - ADR: Select DataTime Input Formats
# - added: DATE_FORMAT: Reverse: Y-m-d and default
# - added: FIRST_DAY_OF_WEEK: Monday as default
# - added: DECIMAL_SEPARATOR: . as default

LANGUAGE_CODE = \
    envs.str('LOCALE')

USE_I18N = \
    envs.bool('USE_I18N')
USE_L10N = \
    envs.bool('USE_L10N')

USE_TZ = \
    envs.bool('USE_TZ')
TIME_ZONE = \
    envs.str('TIME_ZONE')

DATE_FORMAT = \
    envs.str('DATE_FORMAT', default='Y-m-d')
# noinspection PyUnusedName
FIRST_DAY_OF_WEEK = \
    envs.int('FIRST_DAY_OF_WEEK', default=1)

# noinspection PyUnusedName
DECIMAL_SEPARATOR = \
    envs.str('DECIMAL_SEPARATOR', default='.')

# ================== Data Limits ==================
# - Added `DATA_UPLOAD_MAX_MEMORY_SIZE` for defaults
# - Added `DATA_UPLOAD_MAX_FIELDS` for defaults
# - Added `DATA_UPLOAD_MAX_NUMBER_FILES` for defaults

# Default: 2.5MB || Raised SuspiciousOperation (RequestDataTooBig)
DATA_UPLOAD_MAX_MEMORY_SIZE = \
    envs.int('DATA_UPLOAD_MAX_MEMORY_SIZE',
             default=2621440)

# Default: 1000 || Raised SuspiciousOperation (TooManyFieldsSent)
DATA_UPLOAD_MAX_NUMBER_FIELDS = \
    envs.int('DATA_UPLOAD_MAX_NUMBER_FIELDS',
             default=500)

# Default: 100 || Raised SuspiciousOperation (TooManyFiles)
DATA_UPLOAD_MAX_NUMBER_FILES = \
    envs.int('DATA_UPLOAD_MAX_NUMBER_FILES',
             default=10)

# ==================== File & Uploads ====================
# ChangeLog: 2023-08-10:  Comment Out when not implemented
# - TODO: Remove Media Root and Static Root as confirmed not needed
# - Added: Storages (4.2 LTS)
# - ADR: Select to specific files storage backend

# https://docs.djangoproject.com/en/4.2/ref/settings/#storages

STORAGES = {
    'default': {
        'BACKEND': 'django.core.files.storage.FileSystemStorage',
    },
    'staticfiles': {
        'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
        'OPTIONS': {},
    },
}

# ================ File Manage ==================

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

FILE_UPLOAD_MAX_MEMORY_SIZE = \
    envs.int('FILE_UPLOAD_MAX_MEMORY_SIZE',
             default=2621440)

FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_TEMP_DIR = os.path.join(os.path.dirname(
    os.path.dirname(
        os.path.abspath(__file__))), 'temp/upload')

# ==================== Stored Files ====================
# Do we use Media Root only Heroku/CloudStorage?
# - Noted: Media Files (Uploads), Untrustworthy
# - ADR: Select for files to use absolute paths, dynamic paths or relative paths
# - added: STORAGES (4.2 LTS => 5.0)
# - added: Staticfiles, FileSystemStorage, Static Url, Static Root,

MEDIA_ROOT = \
    envs.str('MEDIA_ROOT', default='media')  # noqa
MEDIA_URL = \
    envs.str('MEDIA_URL', default='media/')

# ==================== Static Files ====================
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# https://learndjango.com/tutorials/django-static-files-and-templates

STATIC_URL = \
    envs.str('STATIC_URL', default='static/')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '', 'static'),
    os.path.join(BASE_DIR, 'apps/kore', 'static'),
    os.path.join(BASE_DIR, 'apps/profile', 'static'),
    os.path.join(BASE_DIR, 'apps/dash', 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# ==================== Stoages Files ====================

# Credits:
# https://www.reddit.com/r/django/comments/12chtin/
# accessing_the_new_storages_in_django_42_upgrade/
# Default STORAGES from Django documentation
# See: https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-STORAGES

# Use ManifestStaticFilesStorage when not in debug mode
if not DEBUG:
    STORAGES[ 'staticfiles' ] = {
        "BACKEND": \
            ("django.contrib.staticfiles.storage"
             ".ManifestStaticFilesStorage")}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# ==================== Messages ====================
# https://docs.djangoproject.com/en/4.2/ref/contrib/messages
# https://docs.djangoproject.com/en/4.2/ref/contrib/messages/#message-displaying

# noinspection PyUnusedName
MESSAGE_LEVEL = \
    envs.str('MESSAGE_LEVEL', default='messages.DEBUG')
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
# noinspection PyUnusedName
MESSAGE_TAGS = {
    messages.DEBUG: envs.str('MESSAGE_TAGS_DEBUG', default='debug'),
    messages.INFO: envs.str('MESSAGE_TAGS_INFO', default='info'),
    messages.SUCCESS: envs.str('MESSAGE_TAGS_SUCCESS', default='success'),
    messages.WARNING: envs.str('MESSAGE_TAGS_WARNING', default='warning'),
    messages.ERROR: envs.str('MESSAGE_TAGS_ERROR', default='error'),
}

# ==================== Email & Notifications ====================
# ChangeLog: 2023-09-12:  Comment Out when not implemented
# - added: EMAIL_BACKEND for SMTP, Console, Memory, Dummy
# - added: EMAIL_SUBJECT_PREFIX for Django
# - added: SERVER_EMAIL, FROM_EMAIL for Django
# - added: ADMINS, MANAGER for Django
# - added: EMAIL_HOST, EMAIL_HOST_PASSWORD, EMAIL_HOST_USER for SMTP
# - added: EMAIL_PORT, EMAIL_USE_LOCALTIME, EMAIL_USE_SSL, EMAIL_TIMEOUT
# - added: ANYJET_BACKEND for AnyMail ESPs: Mailjet


# Default: Django's SMTP
# noinspection PyUnusedName
DJSMTP_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# Use for development only: to stdout, only
DJCONSOLE_BACKEND = "django.core.mail.backends.console.EmailBackend"
# DJ Test Runner uses this for testing
# noinspection PyUnusedName
DJMEMORY_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
# noinspection PyUnusedName
DJDUMMY_BACKEND = "django.core.mail.backends.dummy.EmailBackend"
ANYJET_BACKEND = "anymail.backends.mailjet.EmailBackend"
# noinspection PyUnusedName
MAILPANEL_BACKEND = 'mail_panel.backend.MailToolbarBackend'

EMAIL_BACKEND = ""
# Third Party: MailJet
if DEBUG:
    EMAIL_BACKEND = DJCONSOLE_BACKEND
else:
    EMAIL_BACKEND = ANYJET_BACKEND

# ==================== AnyMail ====================
# Chnagelog
# - added: AnyMail for MailJet

# noinspection PyUnusedName
MAILJET_API_URL = "https://api.mailjet.com/v3.1/"

ANYMAIL.update({
    'MAILJET_API_KEY': envs.str('MJ_APIKEY_PUBLIC'),
    'MAILJET_SECRET_KEY': envs.str('MJ_APIKEY_PRIVATE'),
})

ADMIN_EMAIL = \
    envs.str('ADMIN_EMAIL',
             default='webmaster@dash-and-do.xyz')
SERVER_EMAIL = \
    envs.str('SERVER_EMAIL', default='server@dash-and-do.xyz')  # noqa
ADMINS = [ ADMIN_EMAIL ]
MANAGERS = ADMINS
EMAIL_SUBJECT_PREFIX = \
    envs.str('EMAIL_SUBJECT_PREFIX', default='[Django] ')

# # Send from site manager, automated messages.
if DEBUG:
    CERT = True
    DEFAULT_FROM_EMAIL = emailenv.str('DEFAULT_FROM_EMAIL',
                                      default='webmaster@dash-and-do.xyz')  #
    # noqa
    EMAIL_HOST = emailenv.str('TEST_HOST', default='dash-and-do.xyz')
    EMAIL_HOST_PASSWORD = emailenv.str('TEST_HOST_PASSWORD')
    EMAIL_HOST_USER = emailenv.str('TEST_HOST_USER')
    EMAIL_BACKEND = emailenv.str('EMAIL_BACKEND',
                                 default=DJCONSOLE_BACKEND)
    EMAIL_PORT = 8025
    EMAIL_USE_LOCALTIME = \
        emailenv.bool('EMAIL_USE_LOCALTIME', default=False)

    if CERT is True:
        EMAIL_USE_SSL = emailenv.bool('TEST_USE_SSL')
    else:
        EMAIL_USE_TLS = emailenv.bool('TEST_USE_TLS')

    EMAIL_TIMEOUT = emailenv.int('TEST_TIMEOUT', default=60)
else:
    EMAIL_BACKEND = \
        emailenv.str('EMAIL_BACKEND',
                     default='django.core.mail.backends.console.EmailBackend')
    DEFAULT_FROM_EMAIL = emailenv.str('DEFAULT_FROM_EMAIL',
                                      default='webmaster@localhost')  # noqa
    EMAIL_HOST = emailenv.str('EMAIL_HOST', default='localhost')
    EMAIL_HOST_PASSWORD = \
        emailenv.str('EMAIL_HOST_PASSWORD', default='')
    EMAIL_HOST_USER = emailenv.str('EMAIL_HOST_USER', default='')
    EMAIL_PORT = emailenv.int('EMAIL_PORT', default=25)
    EMAIL_USE_LOCALTIME = \
        emailenv.bool('EMAIL_USE_LOCALTIME', default=False)
    EMAIL_USE_SSL = emailenv.bool('EMAIL_USE_SSL', default=False)
    EMAIL_TIMEOUT = emailenv.int('EMAIL_TIMEOUT', default=60)

# ==================== Error Handling ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#ignorable-404-urls
# - added: IGNORABLE_404_URLS forBrokenLinkEmailsMiddleware

IGNORABLE_404_URLS = [ ]

# ==================== Logging ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#logging

# - added: LOGGING_CONFIG and Logging Configuration
# - updated: LOGGING configuration from docs (23-09-17)
# - tested: TODO logging test/checks: ❓

LOGGING_CONFIG = \
    envs.str('LOGGING_CONFIG',
             default='logging.config.dictConfig')


# ==================== Logging ====================
class LogConfig:  # pylint: disable=too-few-public-methods
    """Logging Configuration"""

    class Handler:  # pylint: disable=too-few-public-methods
        """Logging Handlers Labels"""
        CONSOLE = 'console'
        FILE = 'file'
        TEMPLATE = 'django.template'
        SERVER = 'django.server'
        MAIL = 'mail_admins'


# https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'handlers': [ 'console' ],
        'level': 'DEBUG',
    },
    'handlers': {
        LogConfig.Handler.CONSOLE: {
            "level": "DEBUG",
            "filters": [ "require_debug_true" ],
            'class': 'logging.StreamHandler',
        },
        # "file": {
        #     "level": "INFO",
        #     "class": "logging.handlers.RotatingFileHandler",
        #     "filters": [ "require_debug_true" ],
        #     "filename": "./logs/logging/debug.log",
        #     "maxBytes": 50000,
        #     # Optional: Sets the maximum file size before rotation (in bytes)
        #     "backupCount": 5,
        #     # Optional: Sets the number of backup files to keep
        # },
        LogConfig.Handler.TEMPLATE: {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filters": [ "require_debug_true" ],
            "filename": "./logs/logging/templatedebug.log",
            "maxBytes": 50000,
            # Optional: Sets the maximum file size before rotation (in bytes)
            "backupCount": 5,
            # Optional: Sets the number of backup files to keep
        },
        LogConfig.Handler.SERVER: {
            "level": "WARN",
            "class": "logging.StreamHandler",
            "filters": [ "require_debug_true" ],
            "formatter": LogConfig.Handler.SERVER,
        },
        LogConfig.Handler.MAIL: {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            'filters': [ 'require_debug_false' ],
            "include_html": True,
            "email_backend": "django.core.mail.backends.smtp.EmailBackend",
        },
    },

    "loggers": {
        "django": {
            "handlers": [ LogConfig.Handler.CONSOLE, ],
            "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
            "propagate": False,
            "formatter": "simple",
        },
        "debug": {
            "handlers": [ LogConfig.Handler.CONSOLE, ],
            "level": "DEBUG",
            "propagate": True,
            "formatter": "verbose",
        },
        "django.request": {
            "handlers": [ LogConfig.Handler.MAIL ],
            "level": "ERROR",
            "propagate": False,
            "formatter": "verbose",
        },
        LogConfig.Handler.SERVER: {
            "handlers": [ LogConfig.Handler.SERVER ],
            "level": "INFO",
            "propagate": False,
            "formatter": "django.server",
        },
        LogConfig.Handler.TEMPLATE: {
            "handlers": [ LogConfig.Handler.CONSOLE,
                          LogConfig.Handler.TEMPLATE ],
            "level": "INFO",
            "propagate": False,
            "formatter": "verbose",
        },
        "django.security.csrf": {
            "handlers": [ "console" ],
            "level": "WARN",
            "propagate": False,
            "formatter": "verbose",
        },
        "django.db.backends": {
            "handlers": [ "console" ],
            "level": "WARN",
            "propagate": False,
            "formatter": "simple",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} "
                      "{message} {extra}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message} {extra}",
            "style": "{",
        },
        LogConfig.Handler.SERVER: {
            "()": "django.utils.log.ServerFormatter",
            "format": "{server_time}] {message} {request} {status_code}",
            "style": "{",
        }
    },
}

# ==================== Security ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-content-type-nosniff # noqa
# Changelog: 2023-08-10 (Comment Out when not implemented)
# - TODO: to add: Security Content, Policy, Referrer, SSL, HSTS, CORS, CSP, XSS,
# - Updated: No Sniff, Open Policy, Referrer Policy, CSRF

SECURE_CONTENT_TYPE_NOSNIFF = \
    envs.bool('SECURE_CONTENT_TYPE_NOSNIFF', default=True)
#
SECURE_CROSS_ORIGIN_OPENER_POLICY = \
    envs.str('SECURE_CROSS_ORIGIN_OPENER_POLICY', default='same-origin')
#
SECURE_REFERRER_POLICY = \
    envs.str('SECURE_REFERRER_POLICY', default='same-origin')

# SECURE_SSL_HOST = \
envs.str('SECURE_SSL_HOST', default=None)
# SECURE_SSL_REDIRECT = \
envs.bool('SECURE_SSL_REDIRECT', default=False)

# Disable and Research: Must have correct SECURE_HSTS_SECONDS. Critical
# SECURE_HSTS_PRELOAD = \
envs.bool('SECURE_HSTS_PRELOAD', default=True)

# ==================== Proxy & Routing====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-proxy-ssl-header
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-redirect-exempt
# - noted: Not using Proxy, so not needed

# SECURE_REDIRECT_EXEMPT = \
envs.list('SECURE_REDIRECT_EXEMPT', default=[ ])

# ==================== Signing ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#signing-backend
# - TODO: added: Signing Backend

# SIGNING_BACKEND = \
envs.str('SIGNING_BACKEND', default='django.core.signing.TimestampSigner')

# ==================== Sessions ====================
# ChangeLog: 2023-09-14 (Comment Out for implementation)
# https://docs.djangoproject.com/en/4.2/topics/http/sessions/
# #module-django.contrib.sessions
# - ADR: Select Session Storage Engine: Cookie or Database or Cache or File?
# - updated: Cookie: Age, HttpOnly, Name, Path,
# - todo: SameSite, Secure, Domain,
# - updated: Engine, Serialiser:
# - updated: Options: Expire, Cache,

# Age of session cookie, Default 2 weeks (in seconds).
SESSION_COOKIE_AGE = envs.int('SESSION_COOKIE_AGE',
                              default=60 * 60 * 24 * 7 * 2)
SESSION_COOKIE_DOMAIN = \
    envs.str('SESSION_COOKIE_DOMAIN', default=None)
SESSION_COOKIE_HTTPONLY = \
    envs.bool('SESSION_COOKIE_HTTPONLY', default=True)
SESSION_COOKIE_NAME = \
    envs.str('SESSION_COOKIE_NAME', default='sessionid')
SESSION_COOKIE_PATH = \
    envs.str('SESSION_COOKIE_PATH', default='/')
SESSION_COOKIE_SAMESITE = \
    envs.str('SESSION_COOKIE_SAMESITE', default='Lax')
SESSION_COOKIE_SECURE = \
    envs.bool('SESSION_COOKIE_SECURE', default=False)
SESSION_ENGINE = \
    envs.str('SESSION_ENGINE',
             default='django.contrib.sessions.backends.signed_cookies')
SESSION_EXPIRE_AT_BROWSER_CLOSE = \
    envs.bool('SESSION_EXPIRE_AT_BROWSER_CLOSE',
              default=False)
SESSION_SAVE_EVERY_REQUEST = \
    envs.bool('SESSION_SAVE_EVERY_REQUEST',
              default=False)

# https://docs.djangoproject.com/en/4.2/topics/http/sessions/
# #session-serialization
# SESSION_SERIALIZER = \
#     envs.str('SESSION_SERIALIZER',
#             default='django.contrib.sessions.serializers.JSONSerializer')

# ==================== CSRF & Sessions ====================
# ChangeLog: 2023-09-14 (Comment Out for implementation)
# - ADR: Select User Session v Cookie storage
# - Added Persistent Session Cookies
# - Added CSRF Cookie Settings (Domain, SameSite, HTTPS)
# - Added User Session Config for CSRF Cookie or Session
# - Updated .env/ConfigVars
# - Updated CSRF Cookie Settings (Name, Path, Same Site, Secure, Header Name)
# - Updated CSRF Cookie Settings (Use Sessions, Failure View)

# Age of CSRF Cookie, Default 1 week (in seconds).
CSRF_COOKIE_AGE = \
    envs.int('CSRF_COOKIE_AGE', default=60 * 60 * 24 * 7)

# # Added to .env file.
# # Whether to use a secure cookie for the CSRF cookie/domain. Add to .env file.
# CSRF_COOKIE_DOMAIN = \
envs.str('CSRF_COOKIE_DOMAIN', default=None)

# # https://docs.djangoproject.com/en/4.2/ref/settings/#csrf-trusted-origins
# CSRF_TRUSTED_ORIGINS = \
envs.list('CSRF_TRUSTED_ORIGINS', default=[ ])

# # Whether to HTTP Only. False by default.
CSRF_COOKIE_HTTPONLY = \
    envs.bool('CSRF_COOKIE_HTTPONLY', default=False)
# CSRF_COOKIE_MASKED = \
envs.bool('CSRF_COOKIE_MASKED', default=False)
CSRF_COOKIE_NAME = \
    envs.str('CSRF_COOKIE_NAME', default='csrfmiddlewaretoken')
# CSRF_COOKIE_PATH = \
envs.str('CSRF_COOKIE_PATH', default='/')

# # See SESSION_COOKIE_SAMESITE flag for more info. Prevents X-Site requests.
CSRF_COOKIE_SAMESITE = \
    envs.str('CSRF_COOKIE_SAMESITE', default='Lax')
CSRF_COOKIE_SECURE = envs.bool('CSRF_COOKIE_SECURE', default=False)
CSRF_HEADER_NAME = \
    envs.str('CSRF_HEADER_NAME', default='HTTP_X_CSRFTOKEN')

# # CSRF Session Management
# # 1: Default Error Views: Session Middleware before other middleware
CSRF_USE_SESSIONS = \
    envs.bool('CSRF_USE_SESSIONS', default=False)

# Failure Views: dotted path.
# https://docs.djangoproject.com/en/4.2/ref/settings/#csrf-failure-view
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
