"""Django Base Settings for dash_and_do project. # pylint: disable=too-many-
lines,C0302 # noqa: disable=too-many-lines Generated by 'django-admin
startproject' using Django 4.2.6. (LTS)

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/

Changelog:
2023.10.10
- Noted: Reviewed and updated the settings file. Pre 1st deploy to heroku.
- Added:
    - New settings if a setting is: If DEBUG then Development only.
    - New settings if a setting is: If Not DEBUG then Deployment/Production
    only.
- Added:
    - New Database settings for Postgress/Elephant for deployment/production.
    - New Storages settings for just Whitenoise for deployment/production.
    - New Security Settings for Herokuapp.com using HTTPS on free dynos.
- Updated:
  - Debugging & Internal IP:
        Development: Allowed Hosts: Localhost
        Production: Allowed Hosts: .herokupapp.com
  - Templates: Development: Template dirs | Production: Template dirs
  - Installed Apps:
        Development: Development: like Djnago Toolbar and Production Apps
        Production: Default, Third Party and Project Apps
  - Database:
        Development: SQLite
        Production: Postgress/Elephant
  - Middleware:
        Common Middleware Defaults, Third Party and Project Middleware
        Development: BrokenLinks, CIDR, PDB,
        Production: None, see Common Middleware
  - Storage:
        Development: Files and Staticfiles
        Production: Whitenoise
    - Only Whitenoise
  - Emailing:
        Development:
        Production:
- Modified: (Ruffed Checked: 2023.10.10)
  - os.path.join(BASE_DIR, '.env') to Path class i.e.  VAR = BASE_DIR / '.env'
    i.e. BASE_DIR = Path(__file__).resolve().parent.parent
- Noted:
  - Added Changelogs to the following:
    -  Debugging & Internal IP
    -  Application Configuration
    -  Middleware
    -  Templates
    -  Databases, and  Djangon Environ for dj_url()
    -  Authentication
    -  Django AllAuth
    -  Files, Media & Uploads
    -  Emailing
    -  Security
    -  Messages
    -  Sessions
    -  CSRF


    - This is ammended
"""

#  Copyright (c) 2023.

# ================================ Imports ===============================
# -added: environ for django-environ & environmental variables.

# System Library
import os

from pathlib import Path

# Django Library
from django.contrib.messages import constants as messages

# Third Party
# import django_behave
from environ import Env  # django_environ

# Local: Project Libraries
from dash_and_do.thirdparty import ANYMAIL  # noqa

# ================================== Third Party ===============
# - added: third party settings for Settings.py

# ================================ Base Paths ===============================

BASE_DIR = Path(__file__).resolve().parent.parent

# ================================ Environment Variables =====================
# - added: Read the .env file
# - added: Read the .emailing file from emailing configuration
# - note: Assign the values from the .env & .emailing variables

envs = Env()
# Replacing os.path.join(BASE_DIR, '.env')
env_file = BASE_DIR / '.env'
envs.read_env(env_file)

# ...

emailenv = Env()
# Replacing os.path.join(BASE_DIR, '.email')
emailenv_file = BASE_DIR / '.email'
envs.read_env(emailenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# ================================ Key & Mode *SECURITY WARNING* =============
# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key
# - added: SECRET_KEY from .env file
# - added: DEBUG from .env file
# - added: SECRET_KEY_FALLBACKS

SECRET_KEY = envs.str('SECRET_KEY')

# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key-fallbacks
SECRET_KEY_FALLBACKS = []

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = envs.bool('DEBUG')
TEMPLATE_DEBUG = envs.bool('TEMPLATE_DEBUG', default=DEBUG)
ADMIN_ENABLED = envs.bool('ADMIN_ENABLED', default=DEBUG)

# Supress the warning for Django 5.0
if DEBUG:
    # pylint: disable=import-outside-toplevel,ungrouped-imports
    import warnings

    from django.utils.deprecation import RemovedInDjango50Warning

    warnings.simplefilter('ignore', RemovedInDjango50Warning)

if DEBUG:
    RUNSERVERPLUS_SERVER_ADDRESS_PORT = '127.0.0.1:8003'
    RUNSERVERPLUS_POLLER_RELOADER_INTERVAL = 10

# ================================ Server & Hosting ==========================
# https://docs.djangoproject.com/en/4.2/ref/settings/#wsgi-application
# - added: default charset to utf-8.
# - added: PREPEND_WWW & APPEND_SLASH to False
# - added: X_FRAME_OPTIONS to SAMEORIGIN

# Server & Hosting
# noinspection PyUnusedName
WSGI_APPLICATION = 'dash_and_do.wsgi.application'
# Url & Routing: Project URLS
ROOT_URLCONF = 'dash_and_do.urls'

# Per HTTP Requests
DEFAULT_CHARSET = \
    envs.str('DEFAULT_CHARSET', default='utf-8')

# Only Used in debug CommonMiddleware installed.
PREPEND_WWW = \
    envs.bool('PREPEND_WWW', default=False)
APPEND_SLASH = \
    envs.bool('APPEND_SLASH', default=False)

# +https://docs.djangoproject.com/en/4.2/ref/settings/#x-frame-options
# CLICKJACKING/Decorators and Middleware
X_FRAME_OPTIONS = envs.str('X_FRAME_OPTIONS', default='DENY')

# ============================================================================
# Debugging & Internal IP
# - Added: ALLOWED_HOSTS for localhost resources. Refers to the following:
#  - https://www.perplexity.ai/search/79db4ade-4c37-436d-9bec-940c7884d8ae?s=c
#  - https://docs.djangoproject.com/en/4.2/ref/settings/#internal-ips
# - Added: Internal IPs
# - Added: AllowCIDR Middleware
# - Updated:
#  - IF DEBUG: localhost, 127.0.0.1
#  - IF Not Debug: *.herokuapp.com for subdomains and herokuapp.com domain
# - Noted: ALLOWED_HOSTS CIDRs via IPRangeLists/IPTools - throws error
# - Noted:
#  - CIDR IP Ranges are not allowed in ALLOWED_HOSTS
#  - ALLOWED_HOSTS is a list of strings, not a list of IP addresses.
#  - ALLOWED_HOSTS can be augmented by ALLOWED_CIDR_NETS
#  - CIDR: 192.168.0.0/16


# Common to Development and Production
ALLOWED_HOSTS = ['*']

# noinspection PyUnusedName
if DEBUG:
    DEBUG_PROPAGATE_EXCEPTIONS = \
        envs.bool('DJANGO_DEBUG_PROPAGATE_EXCEPTIONS', default=True)
    ALLOWED_HOSTS += ['localhost', '127.0.0.1']
    INTERNAL_IPS = ['127.0.0.1']
    # See AllowCIDR Middleware
    ALLOWED_CIDR_NETS = ['192.168.0.0/16']

if not DEBUG:
    ALLOWED_HOSTS += [
        'localhost',
        '127.0.0.1'
        '*.herokuapp.com'
    ]

# Below the import statements

# ================================ Application Configuration =================
# Changelog:
# - Added: default Django apps: admin, auth, contenttypes, sessions,
#   messages, staticfiles
# - Added: development apps for debugging and enhancements: debug_toolbar,
#   django_extensions, django_behave
# - Updated: third-party apps. Added new apps: rest_framework, corsheaders,
#   anymail, mail_templated, widget_tweaks, django_htmx
# - Noted: Third-party apps are always included in every environment
# - Added: project-specific apps dynamically based on environment variables:
#   KORE_APP, USERS_APP
# - Noted: apps loading order is - default Django apps, development apps
#   (only in debug mode), third-party apps, and then project-specific apps


INSTALLED_APPS = []
DEVELOPMENT_APPS = []

if DEBUG:
    INSTALLED_APPS += [
        # 'debug_toolbar',
    ]

INSTALLED_APPS += [
    # django default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'cloudinary',  # Only for media, not static files
]

if DEBUG:
    DEVELOPMENT_APPS += [
        # apps for development
        'django_extensions',
        'django_behave',
    ]

THIRD_PARTY_APPS = [
    # third party apps
    'allauth',  # Required for allauth
    'allauth.account',  # Required for allauth
    'allauth.socialaccount',  # Required for allauth
    'allauth.socialaccount.providers.github',  # Optional for allauth
    'rest_framework',
    'corsheaders',
    'anymail',
    'mail_templated',
    'widget_tweaks',
    'django_htmx',
]

PROJECT_APPS = [
    # project specific apps
    envs.str('KORE_APP'),
    envs.str('USERS_APP'),
    # envs.str('PROFILE_APP',default='apps.profile'),
    # envs.str('DASH_APP',default='apps.dash'),
]

if DEBUG:
    INSTALLED_APPS += DEVELOPMENT_APPS

# ========================= INSTALLED_APP: INTEGRATE APPS  ===================
# Append apps that are common to development and production

INSTALLED_APPS += THIRD_PARTY_APPS
INSTALLED_APPS += PROJECT_APPS

# ================================ Debug Toolbar =============================
# https://django-debug-toolbar.readthedocs.io

if DEBUG:
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.history.HistoryPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
        # 'djt_nvu.panel.W3ValidatorPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'mail_panel.panels.MailToolbarPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        # 'debug_toolbar.panels.signals.SignalsPanel',
        'djt_csp.panel.SecurityPanel',
        'debug_toolbar_user_panel.panels.UserPanel',
        # 'debug_toolbar.panels.versions.VersionsPanel',
        # 'debug_toolbar.panels.timer.TimerPanel',
        # 'djdt_permissions.panels.PermissionsPanel',
        # 'debug_toolbar.panels.sql.SQLPanel',
        # 'debug_toolbar.panels.cache.CachePanel',
        # 'debug_toolbar.panels.profiling.ProfilingPanel',
    ]

    # https://github.com/d9pouces/djt_nvu
    DJT_NVU_URL = 'https://html5.validator.nu/'

    DEBUG_TOOLBAR_CONFIG = {
        'INSERT_BEFORE':'</body>',
        'RENDER_PANELS':False,
        'RESULTS_CACHE_SIZE':150,
        'ROOT_TAG_EXTRA_ATTRS':'hx-preserve',
        'SHOW_COLLAPSED':True,
        'SHOW_TOOLBAR_CALLBACK':'debug_toolbar.middleware.show_toolbar',
        'OBSERVE_REQUEST_CALLBACK':'debug_toolbar.toolbar.observe_request',
        # panel options
        'EXTRA_SIGNALS':[],
        'ENABLE_STACKTRACES':True,
        'ENABLE_STACKTRACES_LOCALS':True,
        'HIDE_IN_STACKTRACES':(),
        'PRETTIFY_SQL':True,
        'PROFILER_CAPTURE_PROJECT_CODE':True,
        'PROFILER_MAX_DEPTH':10,
        # 'PROFILER_THRESHOLD_RATIO': 8,
        'SHOW_TEMPLATE_CONTEXT':True,
        'SKIP_TEMPLATE_PREFIXES':('django/forms/widgets/', 'admin/widgets/'),
        # 'SQL_WARNING_THRESHOLD': 500,
    }

# ================================ Django DebugTools =========================
# https://github.com/edoburu/django-debugtools

# ================================ Checks ===============================
# https://docs.djangoproject.com/en/4.2/ref/settings/#silenced-system-checks
# - added: Silenced System Checks
# - check: to add:

if DEBUG:
    SILENCED_SYSTEM_CHECKS = \
        envs.list('DJANGO_SILENCED_SYSTEM_CHECKS',
            default=[])

# ============================ WARNINGS & CHECKS =============================

# Supress System Check Warnings
SILENCED_SYSTEM_CHECKS = []
if DEBUG:
    SILENCED_SYSTEM_CHECKS += [
        # I have when not DEBUG: SECURE_HSTS_SECONDS = 63072000 (2 years)
        'security.W004',  # not set a value for the SECURE_HSTS_SECONDS
        # I have when not DEBUG: SECURE_SSL_REDIRECT = True
        'security.W008',  # Your SECURE_SSL_REDIRECT setting is not set to True
        # I have when not DEBUG: SECURE_SSL_REDIRECT = True
        'security.W012',  # SESSION_COOKIE_SECURE is not set to True.
        # I have when not DEBUG: SESSION_COOKIE_SECURE = True
        'security.W016',  # not set CSRF_COOKIE_SECURE to True.
    ]
else:
    # Shows when debug is False, then it is silenced.
    SILENCED_SYSTEM_CHECKS += [
        # I have when not DEBUG:
        'security.W018',  # not have DEBUG set to True in deployment
    ]

# ================================ Middleware ===============================
# https://docs.djangoproject.com/en/4.2/ref/settings/#middleware
# Middleware Settings

# -------- 2023.10.10 --------
# - Added:
#   - Default middleware provided by Django, including security, sessions,
#    common, csrf, auth, messages and clickjacking middlewares.
#   - Third party middleware for Allauth and htmx.
#   - DebugToolbar middleware for debugging and performance optimization
#     in local development. Remember to comment it out when not debugging.
#   - Context for Debug mode, including extra middlewares that should only be
#     used during local development:
#     - DebugToolbarMiddleware for interactive debug toolbar.
#     - BrokenLinkEmailsMiddleware for receiving emails for broken links.
#     - AllowCIDRMiddleware to augment the ALLOWED_HOSTS values in case CIDR IP
#      ranges need to be allowed.
# - Noted:
#   - Some middlewares are currently commented out in production.
#     (XViewMiddleware for Admin Docs)
#     Pdb middleware included during DEBUG for interactive exception traceback.

# Define the middleware common to both development and production
MIDDLEWARE = [
    # Custom, Logs in/out traffic: top of unmodified: request/response stack.
    'dash_and_do.middleware.DashLoggingMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    # Defaults: intersects and modifies all request/respsonse stack.
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'allow_cidr.middleware.AllowCIDRMiddleware',
    'django_pdb.middleware.PdbMiddleware'
]

# # Development specific middleware
# if DEBUG:
#     MIDDLEWARE = [
#         *MIDDLEWARE,
#     ]
# # Production specific middleware
# else:
#     # Middleware specific to production can be added here
#     pass

# ================================ Dev Middleware ============================
# - : Debug Toolbar
# - added: Broken Link Email Middleware (Moved: production or base settings)
# - added: AllowCIDR Middleware
#   - normal ALLOWED_HOSTS values will also work as intended.
#   - This Middleware is intended to augment, not replace,

if DEBUG:
    MIDDLEWARE += [
        # 'debug_toolbar.middleware.DebugToolbarMiddleware',
        'django.middleware.common.BrokenLinkEmailsMiddleware',
        'allow_cidr.middleware.AllowCIDRMiddleware',
        'django_pdb.middleware.PdbMiddleware',  # checked
    ]

# ================================DEBUG CACHE ===============================
if DEBUG:
    # Use for django. MailPanel
    CACHES = {
        'default':{
            'BACKEND':'django.core.cache.backends.dummy.DummyCache',
        }
    }

# ================================ Templates ===============================
# https://docs.djangoproject.com/en/4.2/ref/settings/#templates
# -------- 2023.02.20 --------
# - ADR:
#   - Between DjangoTemplates and Jinja2, DjangoTemplates was chosen.
#   - Custom backends were decided against.
# - Added:
#   Template configuration in `TEMPLATES` setting which includes:
#   - TEMPLATE_DIRS for template directories if Debug, includes for production.
#   - DjangoTemplates backend.
#   - Multiple template directories specified in `DIRS`.
#   - DEBUG as a context processor.
#   - Other context processors like: auth, request, Messages etc. for
#     DjangoTemplates as part of `OPTIONS`.
#   - `APP_DIRS` in the configuration, value is fetched from environment
#     variables.
#   - The 'libraries' option (currently empty) to potentially add custom
#     template tags and filters.
# - Updated:
#   - The string_if_invalid option to show 'Invalid Template: %s' in case of
#     errors.
# - Noted:
#   - The check for AllAuth and Debug Toolbar dependencies in the
#     context_processors.
#   - Some template directorires are currently commented out: Debug Toolbar,
#     profile and dash apps.

TEMPLATE_DIRS = []
if DEBUG:
    TEMPLATE_DIRS += [
        BASE_DIR / 'apps/kore/templates/kore/',
        BASE_DIR / 'apps/users/templates/users/',
        BASE_DIR / 'templates',
        # Un-comment these if needed in development
        # 'venv/Lib/site-packages/debug_toolbar/templates/debug_toolbar/',
        # BASE_DIR / 'apps/profile/templates/profile',
        # BASE_DIR / 'apps/dash/templates/dash',
    ]
else:
    # Only include necessary template directories in production
    TEMPLATE_DIRS += [
        BASE_DIR / 'apps/kore/templates/kore/',
        BASE_DIR / 'apps/users/templates/users/',
        BASE_DIR / 'templates',
    ]

TEMPLATES = [
    {
        'BACKEND':'django.template.backends.django.DjangoTemplates',
        'DIRS':TEMPLATE_DIRS,
        'APP_DIRS':envs.bool('TEMPLATES_APP_DIRS', default=True),
        'OPTIONS':{
            'debug':DEBUG,
            'context_processors':[
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.csrf',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.tz',
                'django.template.context_processors.static',
                'django.template.context_processors.media',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries':{},
            'string_if_invalid':'Invalid Template: %s',
        },
    },
]
# https://docs.djangoproject.com/en/4.2/ref/templates/api/

# ================================= Migrations ===============================
# https://docs.djangoproject.com/en/4.2/ref/settings/#migration-modules
#  If MIGRATION_MODULES is used in your general project settings,
#  remember to use the `migrate --run-syncdb` option if you want to create
#  tables for the app.
# - added: MIGRATION_MODULES for each app
# - removed: MIGRATION_MODULES for dash app,
# - removed: MIGRATION_MODULES for profile app on epic-kore branch

# MIGRATION_MODULES = {
#     'kore': 'kore.migrations',
#     # 'profile': 'profile.migrations',
#     # 'dash': 'dash.migrations',
# }

# ================================ Database ===============================
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Changelog: 2023.10.10
# - Added:
#   - An environment variable `DEBUG` to toggle between development and
#     production settings.
# - Added:
#   - Database settings for SQLite when running in development mode.
# - Added:
#   - A switch to select database config either from DATABASE_URL or from
#     individual DB parameters.
# - Updated:
#   - The production database settings to use PostgreSQL, and these settings
#     are fetched from environment variables.
# - Noted:
#   - read os.environ['DATABASE_URL'] and raises ImproperlyConfigured
#     exception if not found
#   -  The db() method is an alias for db_url()
#   - We ensure that all sensitive database credentials are securely
#     stored in environment variables and not hard-coded.
#   - SITE ID is set to 1 for now, as we have only one site.
#   - The default tablespace is set to empty string, so that the default
#     tablespace is used.
#   - AUTO FIELD is set to BigAutoField, so that the primary key is auto
# - Fixed:
#   - DB credentials are now read properly even when DATABASE_URL is not
#     present, provided the individual DB parameters are set in the envs.
# - TODO:
#   - The `HOST` in the database configuration could use the values determined
#   - by the `ENVIRONMENT` variable.
# - Todo:
#   - A new environment variable `ENVIRONMENT` maybe used to determine which
#     DB_HOST value to use, if you have multiple environments/database hosts.

# - Noted: Utilises Django-enviorn:
#   - https://django-environ.readthedocs.io/en/latest/quickstart.html
#     See Line 74-76:

DATABASES = {}

if DEBUG:
    DATABASES = {
        **DATABASES,
        'default':{
            'ENGINE':'django.db.backends.sqlite3',
            'NAME':BASE_DIR / 'development.sqlite3',
        }
    }
else:
    DATABASE_URL = envs.str('DATABASE_URL')

    if DATABASE_URL:
        # Load database from DATABASE_URL, using django-environ db() function
        DATABASES = {
            **DATABASES,
            'default':envs.db(),
        }
    else:
        # Load individual DB parameters from environment variables
        DATABASES = {
            **DATABASES,
            'default':{
                'ENGINE':'django.db.backends.postgresql',
                'NAME':envs.str('DB_NAME'),
                'USER':envs.str('DB_USER'),
                'PASSWORD':envs.str('DB_PASS'),
                'HOST':envs.str('DB_HOST'),
                'PORT':envs.str('DB_PORT'),
            }
        }

SITE_ID = \
    envs.int('SITE_ID', default=1)

# https://docs.djangoproject.com/en/4.2/topics/db/tablespaces/
DEFAULT_TABLESPACE = \
    envs.str('DEFAULT_TABLESPACE', default='')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================================ Auth Redirects ============================

LOGIN_REDIRECT_URL = \
    envs.str('LOGIN_REDIRECT_URL', default='/')
LOGIN_URL = \
    envs.str('LOGIN_URL', default='/')
LOGOUT_REDIRECT_URL = \
    envs.str('LOGOUT_REDIRECT_URL', default='/')

# ================================ AllAuth Redirects =========================

# from django.urls import reverse_lazy
#
# LOGIN_URL = reverse_lazy('account_login')
# LOGOUT_URL = reverse_lazy('account_logout')
# LOGIN_REDIRECT_URL = reverse_lazy('home')

# ================================ Authentication ============================
# https://docs.djangoproject.com/en/4.2/topics/auth/
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# - ADR: Use Custom User Model
# - updated: AUTH_USER_MODEL: Custom user as required by AllAuth
# - added: AUTHENTICATION_BACKENDS
#   - added: allauth for Authentication
#   - Noted: https://django-allauth.readthedocs.io/en/latest/installation.html#
# - Added
#   - Custom user model `DashUser` for auth user model.
#   - Introduced 'django.contrib.auth.backends.ModelBackend' and
#     'allauth.account.auth_backends.AuthenticationBackend' in
#     AUTHENTICATION_BACKENDS for seamless auth integration.
# - Added placeholders for Social account providers for OAuth functionalities.
#   - Time limit for password resets introduces, set to 15 minutes.
#   - Authentication backend with 'allauth' and 'ModelBackend' for extended
#     functionalities.
# - Added four password validation functionalities.
# - Noted
#   - The settings for OAuth based provider is yet to be configured.

# https://docs.djangoproject.com/en/4.2/topics/auth/customizing
# /#authentication-backends # noqa
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    # 'google': {
    #     # For each OAuth based provider, either add a ``SocialApp``
    #     # (``socialaccount`` app) containing the required client
    #     # credentials, or list them here:
    #     'APP': {
    #         'client_id': '123',
    #         'secret': '456',
    #         'key': ''
    #     }
    # }
}

AUTH_USER_MODEL = \
    envs.str('AUTH_USER_MODEL', default='users.DashUser')

# IssueLog: 2023-08-16
# - todo:     raise ImproperlyConfigured(msg % validator["NAME"])
# django.core.exceptions.ImproperlyConfigured:
# The module in NAME could not be imported: django.contrib.auth.pass
# word_validation.UserAttributeSimilarityValidator.
# Check your AUTH_PASSWORD_VALIDATORS setting
# - check: commented out for now

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.\
    #             password_validation'
    #             '.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.NumericPasswordValidator',
    # },
]

# Timeout: Default 900 seconds (15 minutes), for PasswordResetConfirmView.
PASSWORD_RESET_TIMEOUT = \
    envs.int('PASSWORD_RESET_TIMEOUT', default=900)

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# ================================ Django AllAuth ============================
#  Change Log  Version 2023.10.10
#
# - Added
#   - Account adapter class `DashAccountAdapter` for extended functionalities.
#   - Template extension now supports '.html' format.
# - Added signup forms, including 'DashSignupForm' for custom signups.
#   - Introduced email verification during signup with 'mandatory' setting.
#   - Multiple emails setting limited to 1 per account.
#   - Limit on login attempts added, 10 for debug mode, else 5.
#   - Min length for usernames set to 6 characters.
#   - Introduced ACCOUNT_USERNAME_VALIDATORS for custom validations.
#   - ACCOUNT_USER_MODEL_EMAIL_FIELD and ACCOUNT_USER_MODEL_USERNAME_FIELD
#     fields added for specifying the custom fields in user model.
#
# - Updated
#   - ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS set as True to change the default.
#   - ACCOUNT_AUTHENTICATION_METHOD now uses 'email'.
#   - Multiple emails setting disallowed:  ACCOUNT_CHANGE_EMAIL set as False.
#   - ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE set to False to avoid repeated entries.
#   - ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN set to 180.
#
# - Fixed
#   - ACCOUNT_SIGNUP_FORM_CLASS is empty to avoid risk of cyclic imports.
#   - ACCOUNT_EMAIL_CONFIRMATION_HMAC set to False fixed the usage of HMAC.
#   - ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE set to False to avoid session
#     invalidation.
#
# - Noted
#   - ACCOUNT_LOGIN_ON_PASSWORD_RESET is set to False to avoid auto-login.
#   - ACCOUNT_PASSWORD_INPUT_RENDER_VALUE set to False for security
#     improvements.
#   - ACCOUNT_PREVENT_ENUMERATION set to True to restrict user enumeration.
#   - ACCOUNT_USERNAME_REQUIRED set to False to make email as primary field.
#
# ============================================================================


# Add the following adapter class to use
ACCOUNT_ADAPTER = 'apps.users.adapter.DashAccountAdapter'

# Change the default behavior of authenticated users being redirected
# to LOGIN_REDIRECT_URL
# noinspection PyUnusedName
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True  # checked 23/09/23
# Specifies the login method to use: username, emailing, or username_email
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # checked 23/09/25
# noinspection PyUnusedName
ACCOUNT_CONFIRM_EMAIL_ON_GET = False  # checked 23/09/23
# Multiple Emails. Max 1
ACCOUNT_CHANGE_EMAIL = False  # checked 23/09/23
# Template
# noinspection PyUnusedName
ACCOUNT_TEMPLATE_EXTENSION = 'html'  # checked 23/09/23

# Signup
# noinspection PyUnusedName
ACCOUNT_FORMS = {
    'signup':'apps.users.forms.DashSignupForm',  # highprior
    'login':'allauth.account.forms.LoginForm',  # highprior
    'reset_password':'allauth.account.forms.ResetPasswordForm',  # lowprior
    'change_password':'allauth.account.forms.ChangePasswordForm',  # lowprior
}
# noinspection PyUnusedName
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False
# noinspection PyUnusedName
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
# noinspection PyUnusedName
ACCOUNT_SIGNUP_FORM_CLASS = ''  # DON'T: RISK OF CYCLIC IMPORTS
ACCOUNT_SIGNUP_REDIRECT_URL = 'verify/'

# Account Email
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = True  # checked 23/09/23
# E-mail verification method during signup: none, optional, mandatory
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # checked 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Dash & Do] '  # checked 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_MAX_LENGTH = 254  # checked 23/09/24
# noinspection PyUnusedName
ACCOUNT_MAX_EMAIL_ADDRESSES = 1  # checked 23/09/24

# The URL Protocol to use when generating links in activation emails
# noinspection PyUnusedName
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'  # checked 23/09/23

# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'verify/'
# 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'verify/'
# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # checked 23/09/23
ACCOUNT_EMAIL_CONFIRMATION_HMAC = False  # checked 23/09/23
# noinspection PyUnusedName
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180  # checked 23/09/24

# noinspection PyUnusedName
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 10 if DEBUG else 5
# noinspection PyUnusedName
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
# noinspection PyUnusedName
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# If the ON GET is true, = dangerous
# noinspection PyUnusedName
ACCOUNT_LOGOUT_ON_GET = False
# Sessions Invalidation
# https://docs.djangoproject.com/en/stable/topics/auth/default/
# #session-invalidation-on-password-change
# noinspection PyUnusedName
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# noinspection PyUnusedName
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False
# noinspection PyUnusedName
ACCOUNT_LOGOUT_REDIRECT_URL = LOGIN_URL

# Account Input Rendering
# noinspection PyUnusedName
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = False
# noinspection PyUnusedName
ACCOUNT_PRESERVE_USERNAME_CASING = False

# Account Secuity
# noinspection PyUnusedName
ACCOUNT_PREVENT_ENUMERATION = True
# ACCOUNT_RATE_LIMITS: Out of the box various rate limits are in place.
# noinspection PyUnusedName
ACCOUNT_SESSION_REMEMBER = None

# Account Users
# ACCOUNT_USER_DISPLAY = lambda user: user.username
# noinspection PyUnusedName
ACCOUNT_USERNAME_MIN_LENGTH = 6
ACCOUNT_USERNAME_REQUIRED = False  # checked 23/09/28
# noinspection PyUnusedName
ACCOUNT_USERNAME_BLACKLIST = []

# noinspection PyUnusedName
ACCOUNT_USERNAME_VALIDATORS = []

# Account Custom Models
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'  # checked 23/09/28
ACCOUNT_USER_MODEL_USERNAME_FIELD = None  # checked 23/09/28

# ================================ Django AllAuth Social =====================

# SOCIALACCOUNT_ADAPTER =\
#     'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'
# SOCIALACCOUNT_AUTO_SIGNUP = False
# SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
# SOCIALACCOUNT_EMAIL_REQUIRED = ACCOUNT_EMAIL_REQUIRED
# SOCIALACCOUNT_FORMS = {}
# SOCIALACCOUNT_LOGIN_ON_GET = False
# SOCIALACCOUNT_PROVIDERS = {
#     "github": {
#         # For each provider, you can choose whether or not the
#         # emailing address(es) retrieved from the provider are to be
#         # interpreted as verified.
#         "VERIFIED_EMAIL": True
#     },
# }
# SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED
# Store in Database for Authentication Queries. No custom model?
# SOCIALACCOUNT_STORE_TOKENS = True

# ================================ Internationalization & Formats ============
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# - ADR: Select L10N or DATE Format Used
# - ADR: Select DataTime Input Formats
# - added: DATE_FORMAT: Reverse: Y-m-d and default
# - added: FIRST_DAY_OF_WEEK: Monday as default
# - added: DECIMAL_SEPARATOR: . as default

LANGUAGE_CODE = \
    envs.str('LOCALE')

USE_I18N = \
    envs.bool('USE_I18N')
USE_L10N = \
    envs.bool('USE_L10N')

USE_TZ = \
    envs.bool('USE_TZ')
TIME_ZONE = \
    envs.str('TIME_ZONE')

DATE_FORMAT = \
    envs.str('DATE_FORMAT', default='Y-m-d')
# noinspection PyUnusedName
FIRST_DAY_OF_WEEK = \
    envs.int('FIRST_DAY_OF_WEEK', default=1)

# noinspection PyUnusedName
DECIMAL_SEPARATOR = \
    envs.str('DECIMAL_SEPARATOR', default='.')

# ================================ Data Limits ===============================
# - Added `DATA_UPLOAD_MAX_MEMORY_SIZE` for defaults
# - Added `DATA_UPLOAD_MAX_FIELDS` for defaults
# - Added `DATA_UPLOAD_MAX_NUMBER_FILES` for defaults

# Default: 2.5MB || Raised SuspiciousOperation (RequestDataTooBig)
DATA_UPLOAD_MAX_MEMORY_SIZE = \
    envs.int('DATA_UPLOAD_MAX_MEMORY_SIZE',
        default=2621440)

# Default: 1000 || Raised SuspiciousOperation (TooManyFieldsSent)
DATA_UPLOAD_MAX_NUMBER_FIELDS = \
    envs.int('DATA_UPLOAD_MAX_NUMBER_FIELDS',
        default=500)

# Default: 100 || Raised SuspiciousOperation (TooManyFiles)
DATA_UPLOAD_MAX_NUMBER_FILES = \
    envs.int('DATA_UPLOAD_MAX_NUMBER_FILES',
        default=10)

# ================================== File & Uploads ==========================
# ChangeLog:
#  - Added:
#    - File and Uploads settings.
#       Introduced file upload handlers for memory and temporary file handling,
#       maximum file upload memory size, file upload permissions, and
#       directory for temporary file uploads.
#    - Settings for stored media files.
#       Defined MEDIA_ROOT as the root directory for media files
#       and MEDIA_URL as the URL that handles the media served from MEDIA_ROOT.
#    - Settings for serving static files.
#       Introduced STATIC_URL, STATICFILES_DIRS
#       for additional directories of static files, and STATIC_ROOT
#       as the absolute path to the directory
#       where collectstatic will collect static files for deployment.
#    - A STORAGES for managing storage backends.
#       It uses local file systems for file storage when in DEBUG mode and
#       Uses `whitenoise` for serving media when not DEBUG mode.
#  - Noted:
#    - In the case of using `whitenoise` CompressedManifestStaticFilesStorage
#    is used.
#  - Noted:
#    - The local file system storage backend is selected for 'default'
#    when in DEBUG mode otherwise Cloudinary's MediaCloudinaryStorage is used.
#  - Noted:
#    - The local file system storage backend is selected for 'staticfiles'
#    when in DEBUG mode otherwise a choice is to use
#    Whitenoise's CompressedManifestStaticFilesStorage
#  - Noted: USE_CLOUDINARY_FOR_STATIC toggles for/against using Cloudinary.

# Toggles for/against using Cloudinary for static files: Whitenose otherwise
# Environment variable: CLOUDINARY_FOR_STATIC
# USE_CLOUDINARY_FOR_STATIC = envs.bool('CLOUDINARY_FOR_STATIC',
#     default=False)

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

FILE_UPLOAD_MAX_MEMORY_SIZE = \
    envs.int('FILE_UPLOAD_MAX_MEMORY_SIZE', default=2621440)

FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_TEMP_DIR = BASE_DIR / 'temp' / 'upload'

# ================================== Stored Files ============================
MEDIA_ROOT = envs.str('MEDIA_ROOT', default='media')
MEDIA_URL = envs.str('MEDIA_URL', default='media/')

# ================================== Static Files ============================
STATIC_URL = envs.str('STATIC_URL', default='static/')
STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'apps' / 'kore' / 'static',
    BASE_DIR / 'apps' / 'profile' / 'static',
    BASE_DIR / 'apps' / 'dash' / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# ================================== WHITENOISE ==============================
# https://whitenoise.readthedocs.io/en/latest/django.html


WHITENOISE_ROOT = BASE_DIR / 'staticfiles'
WHITENOISE_AUTOREFRESH = DEBUG  # Toggle per settings.DEBUG
WHITENOISE_USE_FINDERS = DEBUG  # Toggle per settings.DEBUG
WHITENOISE_MANIFEST_STRICT = DEBUG # Toggle per settings.DEBUG
WHITENOISE_MAX_AGE = None
WHITENOISE_INDEX_FILE = False
WHITENOISE_MIMETYPES = None
WHITENOISE_CHARSET = 'utf-8'
WHITENOISE_ALLOW_ALL_ORIGINS = True
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ('jpg', 'jpeg', 'png', 'gif', 'webp',
'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br', 'swf', 'flv', 'woff', 'woff2')
WHITENOISE_ADD_HEADERS_FUNCTION = None
# WHITENOISE_IMMUTABLE_FILE_TEST =  immutable_file_test
WHITENOISE_STATIC_PREFIX = '/static/'
WHITENOISE_KEEP_ONLY_HASHED_FILES = False

# ================================== Static Files ============================
# DEBUG case (using local file systems)
if DEBUG:
    STORAGES = {
        'default':{
            'BACKEND':'django.core.files.storage.FileSystemStorage',
        },
        'staticfiles':{
            # 'BACKEND':'django.contrib.staticfiles.storage.StaticFilesStorage',
            'BACKEND':'whitenoise.storage.CompressedStaticFilesStorage',
            'OPTIONS':{},
        },
    }
# PRODUCTION case (using either cloudinary or `whitenoise`)
else:
    STORAGES = {
        'default':{
            # Assuming you have a
            # "cloudinary_storage.storage.MediaCloudinaryStorage"
            # storage for MEDIA files
            'BACKEND':'cloudinary_storage.storage.MediaCloudinaryStorage',
        },
        'staticfiles':{
            # Either use Cloudinary for STATIC files,
            # a "cloudinary_storage.storage.StaticCloudinaryStorage" storage,
            # or use `whitenoise`
            # `django.contrib.staticfiles.storage.ManifestStaticFilesStorage`
            # 'BACKEND':'whitenoise.storage
            # .CompressedManifestStaticFilesStorage',
            'BACKEND':'whitenoise.storage.CompressedStaticFilesStorage',
            'OPTIONS':{},
        },
    }

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# ================================== Messages ================================
# https://docs.djangoproject.com/en/4.2/ref/contrib/messages
# docs.djangoproject.com/en/4.2/ref/contrib/messages/#message-displaying

# noinspection PyUnusedName
MESSAGE_LEVEL = envs.int('MESSAGE_LEVEL', default=10)
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
# noinspection PyUnusedName
MESSAGE_TAGS = {
    messages.DEBUG:envs.int('MESSAGE_TAGS_DEBUG', default='10'),
    messages.INFO:envs.int('MESSAGE_TAGS_INFO', default='20'),
    messages.SUCCESS:envs.int('MESSAGE_TAGS_SUCCESS', default='25'),
    messages.WARNING:envs.int('MESSAGE_TAGS_WARNING', default='30'),
    messages.ERROR:envs.int('MESSAGE_TAGS_ERROR', default='40'),
}

# ================================== Email & Notifications ===================
# Changelog 2023-10-10
# Added:
# - Introduced email backend constants like
#   DJSMTP_BACKEND, DJCONSOLE_BACKEND, DJMEMORY_BACKEND, DJDUMMY_BACKEND,
#   ANYJET_BACKEND, and MAILPANEL_BACKEND.
# - MAILJET_API_URL constant for AnyMail service's API URL endpoint.
# - Keys MAILJET_API_KEY and MAILJET_SECRET_KEY to ANYMAIL configuration.
# - Admin email configuration with
#   ADMIN_EMAIL, SERVER_EMAIL, ADMINS, MANAGERS & EMAIL_SUBJECT_PREFIX.
# - Conditional setup for .. based on if application is running in DEBUG mode.
#   EMAIL_BACKEND, DEFAULT_FROM_EMAIL, EMAIL_HOST, EMAIL_PORT,
#   EMAIL_USE_SSL and EMAIL_USE_TLS
# Updated:
# - Loading of environmental variables for EMAIL_HOST_PASSWORD,
#       EMAIL_HOST_USER, EMAIL_USE_LOCALTIME and EMAIL_TIMEOUT
#       has been introduced for configuration setup.
# Fixed:
#   - Replaced hard-coded values inside assignments with dynamic environment
#       variable calls and added support for both
#   - DEBUG & non-DEBUG deployments in critical email configurations.

# ==================================================== EMAIL =================
# Set Email Backend
DJANGO_EMAIL_BACKENDS = {
    'DJSMTP':'django.core.mail.backends.smtp.EmailBackend',
    'DJCONSOLE':'django.core.mail.backends.console.EmailBackend',
    'DJMEMORY':'django.core.mail.backends.locmem.EmailBackend',
    'DJDUMMY':'django.core.mail.backends.dummy.EmailBackend',
    'ANYJET':'anymail.backends.mailjet.EmailBackend'
}

EMAIL_BACKEND = DJANGO_EMAIL_BACKENDS['DJCONSOLE'] if DEBUG \
    else DJANGO_EMAIL_BACKENDS['DJSMTP']

# Set Email Service Provider (ESP)
ANYMAIL = {}

# Set Domain
DASH_FROM = envs.str('MAILERTOGO_FROM_USER', default='webmaster')
DASH_FROM_SERVER = envs.str('MAILERTOGO_FROM_USER', default='server')
DASH_DOMAIN = envs.str('MAILTOGO_DOMAIN', default='dash-and-do.xyz')
# Set admin email
ADMIN_EMAIL = envs.str('ADMIN_EMAIL', default=f'{DASH_FROM}@{DASH_DOMAIN}')
SERVER_EMAIL = envs.str('SERVER_EMAIL', default=f'{DASH_FROM_SERVER}'
                                                f'@{DASH_DOMAIN}')
ADMINS = [ADMIN_EMAIL]
MANAGERS = ADMINS

EMAIL_SUBJECT_PREFIX = envs.str('EMAIL_SUBJECT_PREFIX', default='[Django] ')
EMAIL_USE_LOCALTIME = envs.bool('EMAIL_USE_LOCALTIME', default=False)
EMAIL_TIMEOUT = envs.int('EMAIL_TIMEOUT', default=60)

# Configuration based on a toggle
# Development Environment: Localhost
if DEBUG:
    # Development: Localhost
    DEFAULT_FROM_EMAIL = envs.str('EMAIL_HOST_PASSWORD',
        default='webmaster@localhost')
    EMAIL_HOST = envs.str('EMAIL_HOST_PASSWORD', default='localhost')
    EMAIL_HOST_PASSWORD = envs.str('EMAIL_HOST_PASSWORD', default='')
    EMAIL_HOST_USER = envs.str('EMAIL_HOST_USER', default='')
    EMAIL_PORT = 8025

# Production Environment: HerokuApp.com
else:  # noqa PLR5501
    # Toggles for/against using Heroku's MailToGo for emails
    if envs.bool('MAILERTOGO_USE', default=True):
        FROM = envs.str('MAILERTOGO_FROM_USER', default='webmaster')
        MAILERTOGO_DOMAIN = envs.str('MAILERTOGO_DOMAIN',
            default='dash-and-do.xyz')
        DEFAULT_FROM_EMAIL = f'{FROM}@{MAILERTOGO_DOMAIN}'
        EMAIL_HOST = envs.str('MAILERTOGO_SMTP_HOST')
        EMAIL_PORT = envs.int('MAILERTOGO_SMTP_PORT', 587)
        EMAIL_HOST_USER = envs.str('MAILERTOGO_SMTP_USER')
        EMAIL_HOST_PASSWORD = envs.str('MAILERTOGO_SMTP_PASSWORD')
    # Toggles for/against using Dash-and-Do.xyz for emails
    elif envs.bool('DASH_XYZ_USE', default=False):
        FROM = envs.str('DASH_FROM_USER', default='webmaster')
        FROM_SERVER = envs.str('DASH_FROM_SERVER', default='server')
        DASH_DOMAIN = envs.str('DASH_DOMAIN', default='dash-and-do.xyz')
        DEFAULT_FROM_EMAIL = f'{FROM}@{DASH_DOMAIN}'
        ADMIN_EMAIL = envs.str('ADMIN_EMAIL', default=f'{FROM}@{DASH_DOMAIN}')
        SERVER_EMAIL = envs.str('SERVER_EMAIL', default=f'{FROM_SERVER}'
                                                        f'@{DASH_DOMAIN}')
        EMAIL_HOST = envs.str('DASH_HOST')
        EMAIL_PORT = envs.int('DASH_PORT')
        EMAIL_HOST_USER = envs.str('DASH_HOST_USER')
        EMAIL_HOST_PASSWORD = envs.str('DASH_HOST_PASSWORD')
    # Safe Default Empty State: Localhost

    else:
        DEFAULT_FROM_EMAIL = 'webmaster@localhost'
        EMAIL_HOST = 'localhost'
        EMAIL_HOST_PASSWORD = envs.str('EMAIL_HOST_PASSWORD', '')
        EMAIL_HOST_USER = envs.str('EMAIL_HOST_USER', '')
        EMAIL_PORT = 25
        EMAIL_TIMEOUT = 60

# Configuration for SSL/TLS
CERT = envs.bool('CERT', False)
if CERT:
    EMAIL_USE_SSL = True
    EMAIL_USE_TLS = False
else:
    EMAIL_USE_SSL = False
    EMAIL_USE_TLS = True

# ================================== Error Handling ==========================
# https://docs.djangoproject.com/en/4.2/ref/settings/#ignorable-404-urls
# - added: IGNORABLE_404_URLS forBrokenLinkEmailsMiddleware

IGNORABLE_404_URLS = []

# ================================== Logging =================================
# https://docs.djangoproject.com/en/4.2/ref/settings/#logging

# - added: LOGGING_CONFIG and Logging Configuration
# - updated: LOGGING configuration from docs (23-09-17)
# - tested: TODO logging test/checks: ❓

LOGGING_CONFIG = \
    envs.str('LOGGING_CONFIG',
        default='logging.config.dictConfig')


# ================================== Logging =================================
class LogConfig:  # pylint: disable=too-few-public-methods
    """Logging Configuration."""

    class Handler:  # pylint: disable=too-few-public-methods
        """Logging Handlers Labels."""
        CONSOLE = 'console'
        FILE = 'file'
        TEMPLATE = 'django.template'
        SERVER = 'django.server'
        MAIL = 'mail_admins'


# https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
LOGGING = {
    'version':1,
    'disable_existing_loggers':False,
    'root':{
        'handlers':['console'],
        'level':'DEBUG',
    },
    'handlers':{
        LogConfig.Handler.CONSOLE:{
            'level':'DEBUG',
            'filters':['require_debug_true'],
            'class':'logging.StreamHandler',
        },
        # "file": {
        #     "level": "INFO",
        #     "class": "logging.handlers.RotatingFileHandler",
        #     "filters": [ "require_debug_true" ],
        #     "filename": "./logs/logging/debug.log",
        #     "maxBytes": 50000,
        #     # Optional: Sets the maximum file size before rotation (in bytes)
        #     "backupCount": 5,
        #     # Optional: Sets the number of backup files to keep
        # },
        # LogConfig.Handler.TEMPLATE:{
        #     'level':'INFO',
        #     'class':'logging.handlers.RotatingFileHandler',
        #     'filters':['require_debug_true'],
        #     'filename':'./logs/logging/templatedebug.log',
        #     'maxBytes':50000,
        #     # Optional: Sets the maximum file size before rotation (in bytes)
        #     'backupCount':5,
        #     # Optional: Sets the number of backup files to keep
        # },
        # LogConfig.Handler.SERVER:{
        #     'level':'WARN',
        #     'class':'logging.StreamHandler',
        #     'filters':['require_debug_true'],
        #     'formatter':LogConfig.Handler.SERVER,
        # },
        # LogConfig.Handler.MAIL:{
        #     'level':'ERROR',
        #     'class':'django.utils.log.AdminEmailHandler',
        #     'filters':['require_debug_false'],
        #     'include_html':True,
        #     'email_backend':'django.core.mail.backends.smtp.EmailBackend',
        # },
    },
    'loggers':{
        'django':{
            'handlers':[LogConfig.Handler.CONSOLE, ],
            'level':os.getenv('DJANGO_LOG_LEVEL', 'ERROR'),
            'propagate':False,
            'formatter':'simple',
        },
        'debug':{
            'handlers':[LogConfig.Handler.CONSOLE, ],
            'level':'DEBUG',
            'propagate':True,
            'formatter':'verbose',
        },
        # 'django.request':{
        #     'handlers':[LogConfig.Handler.MAIL],
        #     'level':'ERROR',
        #     'propagate':False,
        #     'formatter':'verbose',
        # },
        # LogConfig.Handler.SERVER:{
        #     'handlers':[LogConfig.Handler.SERVER],
        #     'level':'INFO',
        #     'propagate':False,
        #     'formatter':'django.server',
        # },
        # LogConfig.Handler.TEMPLATE:{
        #     'handlers':[LogConfig.Handler.CONSOLE,
        #         LogConfig.Handler.TEMPLATE],
        #     'level':'INFO',
        #     'propagate':False,
        #     'formatter':'verbose',
        # },
        # 'django.security.csrf':{
        #     'handlers':['console'],
        #     'level':'WARN',
        #     'propagate':False,
        #     'formatter':'verbose',
        # },
        # 'django.db.backends':{
        #     'handlers':['console'],
        #     'level':'WARN',
        #     'propagate':False,
        #     'formatter':'simple',
        # },
    },
    'filters':{
        'require_debug_true':{
            '()':'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false':{
            '()':'django.utils.log.RequireDebugFalse',
        },
    },
    'formatters':{
        'verbose':{
            'format':'{levelname} {asctime} {module} {process:d} {thread:d} '
                     '{message} {extra}',
            'style':'{',
        },
        'simple':{
            'format':'{levelname} {message} {extra}',
            'style':'{',
        },
        LogConfig.Handler.SERVER:{
            '()':'django.utils.log.ServerFormatter',
            'format':'{server_time}] {message} {request} {status_code}',
            'style':'{',
        }
    },
}

# ================================== Security ================================
# docs.djangoproject.com/en/4.2/ref/settings/#secure-content-type-nosniff
# 2023-10-10:
# Django security settings for development & production environments.
# - added: In development:
#   Set SECURE_CONTENT_TYPE_NOSNIFF & SECURE_BROWSER_XSS_FILTER to True
#       for increased security.
#   Disabled SECURE_SSL_REDIRECT since HTTPS is typically not used
#       in development.
#   Defined SECURE_PROXY_SSL_HEADER to handle secure proxy SSL headers.
# - added: In production:
#   Set SECURE_CONTENT_TYPE_NOSNIFF, SECURE_BROWSER_XSS_FILTER, and
#       SECURE_SSL_REDIRECT to True for secure handling of content types,
#   XSS filtering, and SSL redirects respectively.
#       Defined SECURE_PROXY_SSL_HEADER to handle secure proxy SSL headers.
# - Noted:
#   Configured SECURE_CROSS_ORIGIN_OPENER_POLICY / SECURE_REFERRER_POLICY
#       to default to 'same-origin' to limit website features for
#       cross-origin browsing contexts.
#   Commented out settings vis HTTP Strict Transport Security (HSTS),
#       to be enabled and configured in a production environment.

SSL_LEVEL_USE = False

if DEBUG:
    # To keep your site even more secure
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'http')
    if SSL_LEVEL_USE:
        SECURE_SSL_REDIRECT = False
        # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        # SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_SECONDS = 0

if not DEBUG:
    # To keep your site even more secure
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    if SSL_LEVEL_USE:
        SECURE_SSL_REDIRECT = True
        # SECURE_SSL_HOST = envs.str('SECURE_SSL_HOST',
        #                           default='*.herokuapp.com')
        # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        # SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_SECONDS = 63072000 if SSL_LEVEL_USE else 0

SECURE_CROSS_ORIGIN_OPENER_POLICY = \
    envs.str('SECURE_CROSS_ORIGIN_OPENER_POLICY', default='same-origin')
#
SECURE_REFERRER_POLICY = \
    envs.str('SECURE_REFERRER_POLICY', default='same-origin')

# if not DEBUG:
# Enable the HSTS header for securing your site even more.
# Increase this for production to 1 year=31536000.
# SECURE_HSTS_SECONDS = 3600  # This is equal to 1 hour.
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True


# ================================== Proxy & Routing==========================
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-proxy-ssl-header
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-redirect-exempt
# - noted: Not using Proxy, so not needed

# if not DEBUG:
#     SECURE_REDIRECT_EXEMPT = [ ]

# ================================== Signing =================================
# https://docs.djangoproject.com/en/4.2/ref/settings/#signing-backend

SIGNING_BACKEND = envs.str('SIGNING_BACKEND',
    default='django.core.signing.TimestampSigner')

# ================================== Sessions ================================
# ChangeLog: 2023-09-14 (Comment Out for implementation)
# https://docs.djangoproject.com/en/4.2/topics/http/sessions/
# #module-django.contrib.sessions
# - ADR: Select Session Storage Engine: Cookie or Database or Cache or File?
# - updated: Cookie: Age, HttpOnly, Name, Path,
# - todo: SameSite, Secure, Domain,
# - updated: Engine, Serialiser:
# - updated: Options: Expire, Cache,
# - updated: IF DEBUG | NOT DEBUG: Domain, Secure
# - NOTED:
# - Sessions are database backed,
# - Do not expire at end of browser,
# - Are not accessible by Javascript,
# - Are not saved by every request,
# - Are not accessible by other domains when deployed to heroku,
#    - Have session seraliser set to JSON as disabled

# ================================== Sessions: ENGINE ========================
SESSION_ENGINE = \
    envs.str('SESSION_ENGINE',
        default='django.contrib.sessions.backends.db')

# ================================== Sessions: DEVELOPMENT ===================
if DEBUG:
    # Domain for the session cookie; None means the domain of the request
    # which set the cookie will be used
    SESSION_COOKIE_DOMAIN = envs.str('SESSION_COOKIE_DOMAIN',
        default=None)

    # Whether to use a secure cookie for the session
    # (i.e. cookie should only be sent over HTTPS);
    # Typically False in development when you might not be running over HTTPS
    SESSION_COOKIE_SECURE = envs.bool('SESSION_COOKIE_SECURE',
        default=False)

# ================================== Sessions: DEPLOYMENT ====================
if not DEBUG:
    # Domain for the session cookie; .herokuapp.com ensures the session cookie
    # is valid for all subdomains under herokuapp.com
    SESSION_COOKIE_DOMAIN = envs.str('SESSION_COOKIE_DOMAIN',
        default='.herokuapp.com')

    # Whether to use a secure cookie for the session
    # (i.e. cookie should only be sent over HTTPS);
    # True is standard in deployment, as you'd usually run over HTTPS
    # in a production environment
    SESSION_COOKIE_SECURE = envs.bool('SESSION_COOKIE_SECURE',
        default=True)

# ================================== Sessions: COMMON ========================
# Age of session cookie, Default 2 weeks (in seconds).
SESSION_COOKIE_AGE = envs.int('SESSION_COOKIE_AGE',
    default=60 * 60 * 24 * 7 * 2)
# Whether to use an HTTP Only cookie for the session;
# Prevents client-side JavaScript from accessing the session cookie
SESSION_COOKIE_HTTPONLY = envs.bool('SESSION_COOKIE_HTTPONLY',
    default=True)

# Name of the cookie used to store the session data
SESSION_COOKIE_NAME = envs.str('SESSION_COOKIE_NAME',
    default='sessionid')

# Path for which the session cookie is active;
# Can be used to limit the cookie to a specific path within your domain
SESSION_COOKIE_PATH = envs.str('SESSION_COOKIE_PATH', default='/')

# Controls the "SameSite" flag on the session cookie;
# Prevents the cookie from being sent in cross-domain requests
# In this case, 'Lax' sends the cookie with same-site and top-level navigations
# (which is safe to know the source of a request)
SESSION_COOKIE_SAMESITE = envs.str('SESSION_COOKIE_SAMESITE',
    default='Lax')

# Whether the session should expire when the browser is closed;
# If True, the session will expire when user closes the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = \
    envs.bool('SESSION_EXPIRE_AT_BROWSER_CLOSE', default=False)

# Whether to save the session data to the database on every request;
# This can put a heavier load on your database, so it depends on your needs
SESSION_SAVE_EVERY_REQUEST = \
    envs.bool('SESSION_SAVE_EVERY_REQUEST', default=False)

# https://docs.djangoproject.com/en/4.2/topics/http/sessions/
# #session-serialization
# SESSION_SERIALIZER = \
#     envs.str('SESSION_SERIALIZER',
#             default='django.contrib.sessions.serializers.JSONSerializer')

# ================================== CSRF & Sessions ==========================
# ChangeLog: 2023-10-11 (Comment Out for implementation)
# - ADR: Select User Session v Cookie storage
# - Noted:
# - Development: CSRF Cookie is not secure, HTTP Only, Domain: *
# - Production: CSRF Cookie is secure, HTTP Only, Domain: .herokuapp.com
# - Common:
#        - CSRF Cookie is not stored in the user's session
#        - CSRF Cookie Age is 7 days
#        - CSRF Cookie Name is csrfmiddlewaretoken
#        - CSRF Cookie Path is /
#        - CSRF Cookie SameSite is Lax
#        - CSRF Cookie Header Name is HTTP_X_CSRFTOKEN
#        - CSRF Cookie Failure View is django.views.csrf.csrf_failure
#        - CSRF Cookie Trusted Origins is empty
# - Updated:
#        - Coupled CSRF Cookie Domain to Session Cookie Domain
#        - Coupled CSRF Cookie Secure to Session Cookie Secure
#        - Coupled CSRF Cookie HTTPOnly to Session Cookie HTTPOnly
#        - Coupled CSRF Cookie Path to Session Cookie Path

# ================================== CSRF: DEVELOPMENT =======================
if DEBUG:
    # Domain for the CSRF cookie, * or all, or empty
    CSRF_COOKIE_DOMAIN = envs.str('CSRF_COOKIE_DOMAIN', default='*')
    # Whether to use a secure cookie for the CSRF cookie.
    # False as we are using HTTP
    CSRF_COOKIE_SECURE = envs.bool('CSRF_COOKIE_SECURE',
        default=False)
# ================================== CSRF: PRODUCTION ========================
if not DEBUG:
    # Domain for the CSRF cookie
    CSRF_COOKIE_DOMAIN = envs.str('CSRF_COOKIE_DOMAIN',
        default=SESSION_COOKIE_DOMAIN)  # Is always same as SESSION_COOKIE
    # Whether to use a secure cookie for the CSRF cookie.
    # False as we are using HTTP
    CSRF_COOKIE_SECURE = envs.bool('CSRF_COOKIE_SECURE',
        default=SESSION_COOKIE_SECURE)  # IS: True, as we are using HTTPS

# ================================== CSRF: COMMON ============================
# Age of CSRF Cookie, Default 1 week (in seconds).
CSRF_COOKIE_AGE = envs.int('CSRF_COOKIE_AGE',
    default=60 * 60 * 24 * 7)
# A list of hosts which are trusted origins for unsafe requests (e.g. POST)
CSRF_TRUSTED_ORIGINS = envs.list('CSRF_TRUSTED_ORIGINS',
    default=[])
# Whether to use a secure cookie for the CSRF HTTP Only. False by default.
CSRF_COOKIE_HTTPONLY = envs.bool('CSRF_COOKIE_HTTPONLY',
    default=SESSION_COOKIE_HTTPONLY)  # IS: True, restricts JS access
# Name of the CSRF cookie
CSRF_COOKIE_NAME = envs.str('CSRF_COOKIE_NAME',
    default='csrfmiddlewaretoken')
# Path for which the CSRF cookie is active
CSRF_COOKIE_PATH = envs.str('CSRF_COOKIE_PATH',
    default=SESSION_COOKIE_PATH)  # IS: /
# See SESSION_COOKIE_SAMESITE flag for more info. Prevents X-Site requests.
CSRF_COOKIE_SAMESITE = envs.str('CSRF_COOKIE_SAMESITE',
    default='Lax')
# Name of the header used for CSRF authentication
CSRF_HEADER_NAME = envs.str('CSRF_HEADER_NAME',
    default='HTTP_X_CSRFTOKEN')
# Whether to store the CSRF token in the user's session instead of a cookie
CSRF_USE_SESSIONS = envs.bool('CSRF_USE_SESSIONS',
    default=False)
# View used when a CSRF authentication fails
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'
