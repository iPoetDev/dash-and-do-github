"""Django Base Settings for dash_and_do project.

Generated by 'django-admin startproject' using Django 4.2.3. (LTS)

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/

Changelog:
2023-08-09
- Added `sys` for appending apps to base directory.
- Added `environ` for django-environ & environmental variables.
- Added apps to `INSTALLED_APPS` for v0.5, v1.0
- Added `django_environ` for .env file support.
- Updated BASE_DIR to search: 2 to 3 parents: for Setting folder
- Updated: Template Base Directory + project templates to search.
- Updated: Canonical values added from.env as per 12 Factor.Config
- Notes: Used env() to markup custom values for env variables & canonical
- Notes: env(var, default=) for default values, not stored in .env file.
values.

2023-08-16
- Added: all development.py settings to settings.py so to pass 'manage.py check'
- Note: Checks causing errors
- Removed: Debug in Templates - Follow up and find right position
- TODO: Move Development Settings to development.py
- TODO: Test Manage.py and Check against moved development.py.
- Note: For now, just go to move on and get admin site running.
"""

#  Copyright (c) 2023.

# ================== Imports ==================
# -added: sys for appending apps to base directory.
# -added: environ for django-environ & environmental variables.

import os

from pathlib import Path
import sys

from environ import Env

# ==================== Third Party ====================
# - added: third party settings for Settings.py

# from .thirdparty import *  # noqa

# ================== Base Paths ==================
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# -added: Extended BASE DIR TO 3 parents for settings folder.

BASE_DIR = Path(__file__).resolve().parent.parent.parent

# ================== Project Structure ==================
# Project Structure: Top Level Refactoring / Applications Grouping
# Adds additional new sources root directory.
# Benefits to this:
# a) reference to apps by name in INSTALLED_APPS.
# b) Grouping apps in own directory.
# - added: apps directory to sys.path

sys.path.append(str(BASE_DIR / 'apps'))

# ================== Environment Variables ==================
# - added: Read the .env file
# - note: Assign the values from the .env variables

env = Env()
env_file = os.path.join(BASE_DIR, '.env')

# Be defensive, check if the file exists by default.
if not os.path.isfile(env_file):
    raise FileNotFoundError(f'{env_file} not found')

env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# ================== Key & Mode *SECURITY WARNING* =================
# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key
# - added: SECRET_KEY from .env file
# - added: DEBUG from .env file
# - added: SECRET_KEY_FALLBACKS

SECRET_KEY = env.str('SECRET_KEY')

# https://docs.djangoproject.com/en/4.2/ref/settings/#secret-key-fallbacks
SECRET_KEY_FALLBACKS = []

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')
TEMPLATE_DEBUG = env.bool('TEMPLATE_DEBUG', default=DEBUG)
ADMIN_ENABLED = env.bool('ADMIN_ENABLED', default=DEBUG)

# ================== Server & Hosting ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#wsgi-application
# - added: default charset to utf-8.
# - added: PREPEND_WWW & APPEND_SLASH to False
# - added: X_FRAME_OPTIONS to DENY

WSGI_APPLICATION = env.str('WSGI_APPLICATION')

ALLOWED_HOSTS = []

ROOT_URLCONF = env.str('ROOT_URLCONF')

# Per HTTP Requests
DEFAULT_CHARSET = env.str('DEFAULT_CHARSET', default='utf-8')

# Only Used in debug CommonMiddleware installed.
PREPEND_WWW = env.bool('PREPEND_WWW', default=False)
APPEND_SLASH = env.bool('APPEND_SLASH', default=False)

# +https://docs.djangoproject.com/en/4.2/ref/settings/#x-frame-options
X_FRAME_OPTIONS = env.str('X_FRAME_OPTIONS', default='DENY')

# ================== Dev Server & Hosting ==================
if DEBUG:
    DEBUG_PROPAGATE_EXCEPTIONS = \
        env.bool('DJANGO_DEBUG_PROPAGATE_EXCEPTIONS', default=True)

# ================== Debugging & Internal IP ==================
# - added: ALLOWED_HOSTS for localhost resources
#   - https://www.perplexity.ai/search/79db4ade-4c37-436d-9bec-940c7884d8ae?s=c
#   - https://docs.djangoproject.com/en/4.2/ref/settings/#internal-ips
# - added: Internal IPs
# - commented: ALLOWED_HOSTS CIDrs via IPRangeLists/IPTools - throws error

if DEBUG:
    ALLOWED_HOSTS += ['localhost', '127.0.0.1']
    INTERNAL_IPS = ['127.0.0.1']
    # INTERNAL_IPS = IpRangeList(['127.0.0.1/24', '192.168.0.0/16'])

if not DEBUG:
    ALLOWED_HOSTS += ['*.herokuapp.com']

# ================== Application ==================

INSTALLED_APPS = [
    #'django.contrib.admindocs',
    #'django_extensions',
]

# Application definition
# - Updated: Added developer apps to `INSTALLED_APPS`
# - Added: Admin Docker app
# - Note: Excluded from base & production settings
# - Noted: add the “Documentation” link in the upper right of the page.- https://docs.djangoproject.com/en/4.2/ref/contrib/admin/admindocs/#module-django.contrib.admindocs


if ADMIN_ENABLED:
    INSTALLED_APPS = []

# ================== Application ==================
# Application definition
# - Updated: Added apps to `INSTALLED_APPS`
# - Updated: Added `django.contrib.humanize` for humanize template tags
# - Moved: `django.contrib.admin` to development.py under ADMIN_ENABLED check
# - Check for: Admin  dependencies Auth, ContentTypes, Messages, Sessions
# - Check for: Debugging Toolbar for: staticfiles
# - added: allauth & allauth.account
# - todo: add: allauth.socialaccount
# - added: anymail for allauth email backend

INSTALLED_APPS += [
    #'debug_toolbar',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'django.contrib.humanize',
    # allauth
    'allauth',
    'allauth.account',
    'anymail',
    #'allauth.socialaccount',
    # ... include the providers you want to enable:
    #'allauth.socialaccount.providers.github',
    # Customization with env variables for canonical values.
    env.str('CORE_APP'),
    # env.str('USERS_APP'),
    # env.str('DASH_APP'),
]

# ================== Checks ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#silenced-system-checks
# - added: Silenced System Checks
# - check: to add:

if DEBUG:
    SILENCED_SYSTEM_CHECKS = \
        env.list('DJANGO_SILENCED_SYSTEM_CHECKS',
                 default=[])

# ================== Middleware ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#middleware
# - added: Add BrokenLinkEmailsMiddleware with correct string for 404 Errors
# - added: AdminDocsMiddleware  bookmarklets
# - Check for: Admin dependencies Authentication, Message

MIDDLEWARE = [
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # checked
    'django.contrib.messages.middleware.MessageMiddleware', # checked
    'django.contrib.admindocs.middleware.XViewMiddleware', # checked
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ================== Dev Middleware ==================
# - : Debug Toolbar
# - added: Broken Link Email Middleware (Moved from production or base settings)
# - added: AllowCIDR Middleware
#   - normal ALLOWED_HOSTS values will also work as intended.
#   - This Middleware is intended to augment, not replace,

if DEBUG:
    MIDDLEWARE += [
        # 'debug_toolbar.middleware.DebugToolbarMiddleware',
        'django.middleware.common.BrokenLinkEmailsMiddleware',
        'allow_cidr.middleware.AllowCIDRMiddleware',
    ]

# ================== DEV CIDR LOCALHOST ==================
# - added: AllowCIDR Middleware

ALLOWED_CIDR_NETS = ['192.168.0.0/16']

# ================== Templates ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#templates
# - Added templates path to `TEMPLATES` DIRS:
# - Added templates NAME as alias for DjangoTemplates
# - ADR: Select between DjangoTemplates or Jinja2. Do not use a custom backend
# - added: DEBUG for Templates
# - Check for: Admin dependencies/OPTIONS: requests, auth, messages
# - Check for: Debugging Toolbar for: DjangoTemplates
# - Check for: DjangoTemplates AllAuth dependencies: requests

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'BACKEND': 'django.template.backends.jinja.Jinja2',
        # 'NAME': env.str('TEMPLATES_NAME', default='djtl'),
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': env.bool('TEMPLATES_APP_DIRS', default=True),
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # checked
                #'django.template.context_processors.csrf',
                'django.contrib.auth.context_processors.auth', # checked
                'django.contrib.messages.context_processors.messages', # check
            ],
        },
    },
]

# =================== Migrations ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#migration-modules
#  If MIGRATION_MODULES is used in your general project settings,
#  remember to use the `migrate --run-syncdb` option if you want to create
#  tables for the app.
# - added: MIGRATION_MODULES for each app
# - removed: MIGRATION_MODULES for dash app,
# - removed: MIGRATION_MODULES for accounts app on epic-core branch

MIGRATION_MODULES = {
    'core': 'core.migrations',
    # 'accounts': 'accounts.migrations',
    # 'dash': 'dash.migrations',
}

# ================== Database ==================
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Development Database moved to development.py
# Production Database moved to production.py
# - added: Site_Id for Databases tables

# ================== Database ==================
# Note: Test for developer only settings

if DEBUG and ADMIN_ENABLED:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


SITE_ID = env.int('SITE_ID', default=1)

# https://docs.djangoproject.com/en/4.2/topics/db/tablespaces/
DEFAULT_TABLESPACE = env.str('DEFAULT_TABLESPACE', default='')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================== Auth Redirects ==================

LOGIN_REDIRECT_URL = env.str('LOGIN_REDIRECT_URL', default='/')
LOGIN_URL = env.str('LOGIN_URL', default='/accounts/login/')
LOGOUT_REDIRECT_URL = env.str('LOGOUT_REDIRECT_URL', default='/')

# ================== AllAuth Redirects ==================

# from django.urls import reverse_lazy
#
# LOGIN_URL = reverse_lazy('account_login')
# LOGOUT_URL = reverse_lazy('account_logout')
# LOGIN_REDIRECT_URL = reverse_lazy('home')

# ================== Authentication ==================
# https://docs.djangoproject.com/en/4.2/topics/auth/#module-django.contrib.auth
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# - ADR: Use default Django Authentication or Custom User Model
# - added: AUTH_USER_MODEL
# - added: AUTHENTICATION_BACKENDS
#   - added: allauth for Authentication
#   - Noted: https://django-allauth.readthedocs.io/en/latest/installation.html
# - added: AUTH_PASSWORD_VALIDATORS
#   - added: User Attribute Similarity
#   - added: Minimum Length
#   - added: Common Passwords
#   - added: Numeric Passwords
# - added: PASSWORD_RESET_TIMEOUT to 15 minutes
# - added: PASSWORD_HASHERS

# https://docs.djangoproject.com/en/4.2/topics/auth/customizing
# /#authentication-backends # noqa
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

AUTH_USER_MODEL = env.str('AUTH_USER_MODEL', default='auth.User')

# IssueLog: 2023-08-16
# - todo:     raise ImproperlyConfigured(msg % validator["NAME"])
# django.core.exceptions.ImproperlyConfigured: The module in NAME could not be imported: django.contrib.auth.                pass
# word_validation.UserAttributeSimilarityValidator. Check your AUTH_PASSWORD_VALIDATORS setting
# - check: commented out for now

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.\
    #             password_validation'
    #             '.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.\
    #              auth.password_validation'
    #             '.NumericPasswordValidator',
    # },
]

# Timeout: Default 900 seconds (15 minutes), for PasswordResetConfirmView.
PASSWORD_RESET_TIMEOUT = env.int('PASSWORD_RESET_TIMEOUT', default=900)

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# ================== Django AllAuth ==================
# ChangeLog: 2023-08-10:  Comment Out when not implemented
# - added: allauth for Authentication all Configurations explicitly
#   - added: Adapter, Redirects Behaviour, Authentication Methods, Templates
#   - added: Forms & Signup, Account Email, Account Protocols,
#   - added: Email Confirmation, Login Attempts, Logout, Sessions Invalidation
#   - added: Account Input Rendering, Account Security, Account Users
# - added: allauth for Social all Configurations explicitly
#   - added: Adapter, Signup, Email Verification, Forms, Login, Query Email
#   - adr: Store Tokens: Select token store in database or not
# - noted: Excluded any custom user models settings

# Add the following adapter class to use
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'

# Change the default behavior of authenticated users being redirected to LOGIN_REDIRECT_URL
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
# Specifies the login method to use: username, email, or username_email
ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_CONFIRM_EMAIL_ON_GET = False

# Template
ACCOUNT_TEMPLATE_EXTENSION = 'html'

# Signup
ACCOUNT_FORMS = {}
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_SIGNUP_FORM_CLASS = None
ACCOUNT_SIGNUP_REDIRECT_URL = LOGIN_URL

# Account Email
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = False
# E-mail verification method during signup: none, optional, mandatory
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Dash & Do] '
ACCOUNT_EMAIL_MAX_LENGTH = 254
ACCOUNT_MAX_EMAIL_ADDRESSES = 1

# The URL Protocol to use when generating links in activation emails
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'

ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_URL
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = None
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_EMAIL_CONFIRMATION_HMAC = False
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180

ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# If the ON GET is true, = dangerous
ACCOUNT_LOGOUT_ON_GET = False
# Sessions Invalidation
# https://docs.djangoproject.com/en/stable/topics/auth/default/#session-invalidation-on-password-change
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False
ACCOUNT_LOGOUT_REDIRECT_URL = LOGIN_URL

# Account Input Rendering
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = False
ACCOUNT_PRESERVE_USERNAME_CASING = False

# Account Secuity
ACCOUNT_PREVENT_ENUMERATION = True
# ACCOUNT_RATE_LIMITS: Out of the box various rate limits are in place.
ACCOUNT_SESSION_REMEMBER = None

# Account Users
# ACCOUNT_USER_DISPLAY = lambda user: user.username
ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_USERNAME_BLACKLIST = []

ACCOUNT_USERNAME_VALIDATORS = []

# Account Custom Models
# ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
# ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'

# ================== Django AllAuth Social ==================

# SOCIALACCOUNT_ADAPTER =\
#     'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'
# SOCIALACCOUNT_AUTO_SIGNUP = False
# SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
# SOCIALACCOUNT_EMAIL_REQUIRED = ACCOUNT_EMAIL_REQUIRED
# SOCIALACCOUNT_FORMS = {}
# SOCIALACCOUNT_LOGIN_ON_GET = False
# SOCIALACCOUNT_PROVIDERS = {
#     "github": {
#         # For each provider, you can choose whether or not the
#         # email address(es) retrieved from the provider are to be
#         # interpreted as verified.
#         "VERIFIED_EMAIL": True
#     },
# }
# SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED
# Store in Database for Authentication Queries. No custom model?
# SOCIALACCOUNT_STORE_TOKENS = True

# ================== Internationalization & Formats ==================
# https://docs.djangoproject.com/en/4.2/topics/i18n/
# - ADR: Select L10N or DATE Format Used
# - ADR: Select DataTime Input Formats
# - added: DATE_FORMAT: Reverse: Y-m-d and default
# - added: FIRST_DAY_OF_WEEK: Monday as default
# - added: DECIMAL_SEPARATOR: . as default

LANGUAGE_CODE = env.str('LOCALE')

USE_I18N = env.bool('USE_I18N')
USE_L10N = env.bool('USE_L10N')

USE_TZ = env.bool('USE_TZ')
TIME_ZONE = env.str('TIME_ZONE')

DATE_FORMAT = env.str('DATE_FORMAT', default='Y-m-d')
FIRST_DAY_OF_WEEK = env.int('FIRST_DAY_OF_WEEK', default=1)

DECIMAL_SEPARATOR = env.str('DECIMAL_SEPARATOR', default='.')

# ================== Data Limits ==================
# - Added `DATA_UPLOAD_MAX_MEMORY_SIZE` for defaults
# - Added `DATA_UPLOAD_MAX_FIELDS` for defaults
# - Added `DATA_UPLOAD_MAX_NUMBER_FILES` for defaults

# Default: 2.5MB || Raised SuspiciousOperation (RequestDataTooBig)
DATA_UPLOAD_MAX_MEMORY_SIZE = env.int('DATA_UPLOAD_MAX_MEMORY_SIZE',
                                      default=2621440)

# Default: 1000 || Raised SuspiciousOperation (TooManyFieldsSent)
DATA_UPLOAD_MAX_NUMBER_FIELDS = env.int('DATA_UPLOAD_MAX_NUMBER_FIELDS',
                                        default=500)

# Default: 100 || Raised SuspiciousOperation (TooManyFiles)
DATA_UPLOAD_MAX_NUMBER_FILES = env.int('DATA_UPLOAD_MAX_NUMBER_FILES',
                                       default=10)

# ==================== File & Uploads ====================
# ChangeLog: 2023-08-10:  Comment Out when not implemented
# - TODO: Remove Media Root and Static Root as confirmed not needed
# - Added: Storages (4.2 LTS)
# - ADR: Select to specific files storage backend

# https://docs.djangoproject.com/en/4.2/ref/settings/#storages

STORAGES_ = {
    # 'default': {
    #     'BACKEND': 'django.core.files.storage.FileSystemStorage',
    # },
    'staticfiles': {
        'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
        'OPTIONS': {},
    },
}

# ==================== Stored Files ====================
# Do we use Media Root only Heroku/CloudStorage?
# - Noted: Media Files (Uploads), Untrustworthy
# - ADR: Select for files to use absolute paths, dynamic paths or relative paths

# MEDIA_ROOT = env.str('MEDIA_ROOT', default='media') # noqa

MEDIA_URL = env.str('MEDIA_URL', default='media/')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_ROOT = env.str('STATIC_ROOT', default='static')  # noqa
STATIC_URL = env.str('STATIC_URL', default='static/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# ==================== Messages ====================
# https://docs.djangoproject.com/en/4.2/ref/contrib/messages
# https://docs.djangoproject.com/en/4.2/ref/contrib/messages/#message-displaying

# MESSAGE_LEVEL = env.str('MESSAGE_LEVEL', default='messages.DEBUG')
# MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
# MESSAGE_TAGS = {
#     messages.DEBUG: env.str('MESSAGE_TAGS_DEBUG', default='debug'),
#     messages.INFO: env.str('MESSAGE_TAGS_INFO', default='info'),
#     messages.SUCCESS: env.str('MESSAGE_TAGS_SUCCESS', default='success'),
#     messages.WARNING: env.str('MESSAGE_TAGS_WARNING', default='warning'),
#     messages.ERROR: env.str('MESSAGE_TAGS_ERROR', default='error'),
# }

# ==================== Email & Notifications ====================
# ChangeLog: 2023-08-10:  Comment Out when not implemented
# - TODO: added: Admins & Managers notifications (Server, Admins, Prefix)
# - TODO: added: EMAIL Configurations for SMTP (from, host, user/paasword,
# - TODO: added: port, ssl, timeout)

# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"

# ==================== AnyMail ====================
# Chnagelog
# - added: AnyMail for MailJet

MAILJET_API_URL = "https://api.mailjet.com/v3.1/"

ANYMAIL = {
    'MAILJET_API_KEY': env.str('MJ_APIKEY_PUBLIC'),
    'MAILJET_SECRET_KEY': env.str('MJ_APIKEY_PRIVATE'),
}



# SERVER_EMAIL = env.str('SERVER_EMAIL', default='root@localhost') # noqa
ADMINS = []
MANAGERS = ADMINS
# EMAIL_SUBJECT_PREFIX = env.str('EMAIL_SUBJECT_PREFIX', default='[Django] ')

# # Send from site manager, automated messages.
# DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL')
# EMAIL_HOST = env.str('EMAIL_HOST')
# EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD', default='')
# EMAIL_HOST_USER = env.str('EMAIL_HOST_USER', default='')
# EMAIL_PORT = env.int('EMAIL_PORT', default=25)
# EMAIL_USE_LOCALTIME = env.bool('EMAIL_USE_LOCALTIME', default=False)
# EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=False)
# EMAIL_TIMEOUT = env.int('EMAIL_TIMEOUT', default=60)

# ==================== Error Handling ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#ignorable-404-urls
# - added: IGNORABLE_404_URLS forBrokenLinkEmailsMiddleware

IGNORABLE_404_URLS = []

# ==================== Logging ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#logging
# https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
# - added: LOGGING_CONFIG and Logging Configuration

LOGGING_CONFIG = env.str('LOGGING_CONFIG',
                         default='logging.config.dictConfig')

LOGGING = {}

# ==================== Security ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-content-type-nosniff # noqa
# Changelog: 2023-08-10 (Comment Out when not implemented)
# - TODO: to add: Security Content, Policy, Referrer, SSL, HSTS, CORS, CSP, XSS,
# CSRF

# SECURE_CONTENT_TYPE_NOSNIFF = env.bool('SECURE_CONTENT_TYPE_NOSNIFF',
#                                        default=True)
# SECURE_CROSS_ORIGIN_OPENER_POLICY = \
#     env.str('SECURE_CROSS_ORIGIN_OPENER_POLICY', default='same-origin')
#
# SECURE_REFERRER_POLICY = env.str('SECURE_REFERRER_POLICY',
#                                  default='same-origin')
# SECURE_SSL_HOST = env.str('SECURE_SSL_HOST', default=None)
# SECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=False)

# Disable and Research: Must have correct SECURE_HSTS_SECONDS. Critical
# SECURE_HSTS_PRELOAD = env.bool('SECURE_HSTS_PRELOAD', default=True)
# SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool('SECURE_HSTS_INCLUDE_SUBDOMAINS',
#                                           default=True)

# 31536000: Must have a correct non-zero value
# SECURE_HSTS_SECONDS = env.int('SECURE_HSTS_SECONDS', default=0)

# ==================== Proxy & Routing====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-proxy-ssl-header
# https://docs.djangoproject.com/en/4.2/ref/settings/#secure-redirect-exempt
# - noted: Not using Proxy, so not needed

# SECURE_REDIRECT_EXEMPT = env.list('SECURE_REDIRECT_EXEMPT', default=[])

# ==================== Signing ====================
# https://docs.djangoproject.com/en/4.2/ref/settings/#signing-backend
# - TODO: added: Signing Backend

# SIGNING_BACKEND = env.str('SIGNING_BACKEND',
#                           default='django.core.signing.TimestampSigner')

# ==================== Sessions ====================
# https://docs.djangoproject.com/en/4.2/topics/http/sessions/#module-django.contrib.sessions
# - ADR: Select Session Storage Engine: Cookie or Database or Cache or File?
# - added: Cookie: Age, Domain, HttpOnly, Name, Path, SameSite, Secure
# - added: Engine, Serialiser:
# - added: Options: Expire, Cache,

# Age of session cookie, Default 2 weeks (in seconds).
# SESSION_COOKIE_AGE = env.int('SESSION_COOKIE_AGE',
#                              default=60 * 60 * 24 * 7 * 2)
# SESSION_COOKIE_DOMAIN = env.str('SESSION_COOKIE_DOMAIN',
#                                 default=None)
# SESSION_COOKIE_HTTPONLY = env.bool('SESSION_COOKIE_HTTPONLY',
#                                    default=True)
# SESSION_COOKIE_NAME = env.str('SESSION_COOKIE_NAME',
#                               default='sessionid')
# SESSION_COOKIE_PATH = env.str('SESSION_COOKIE_PATH',
#                               default='/')
# SESSION_COOKIE_SAMESITE = env.str('SESSION_COOKIE_SAMESITE',
#                                   default='Lax')
# SESSION_COOKIE_SECURE = env.bool('SESSION_COOKIE_SECURE',
#                                  default=True)
# SESSION_ENGINE = env.str('SESSION_ENGINE',
#                          default='django.contrib.sessions')
# SESSION_EXPIRE_AT_BROWSER_CLOSE = env.bool('SESSION_EXPIRE_AT_BROWSER_CLOSE',
#                                            default=False)
# SESSION_SAVE_EVERY_REQUEST = env.bool('SESSION_SAVE_EVERY_REQUEST',
#                                       default=False)

# https://docs.djangoproject.com/en/4.2/topics/http/sessions/#session-serialization
# SESSION_SERIALIZER = \
#     env.str('SESSION_SERIALIZER',
#             default='django.contrib.sessions.serializers.JSONSerializer')

# ==================== CRSF & Sessions ====================
# Changelog: 2023-08-10 (Comment Out for implementation)
# - ADR: Select User Session v Cookie storage
# - Added Persistent Session Cookies
# - Added CSRF Cookie Settings (Domain, SameSite, HTTPS)
# - Added User Session Config for CSRF Cookie or Session
# - Updated .env/ConfigVars

# Age of CSRF Cookie, Default 1 week (in seconds).
# CSRF_COOKIE_AGE = env.int('CSRF_COOKIE_AGE', default=60 * 60 * 24 * 7)

# # Added to .env file.
# # Whether to use a secure cookie for the CSRF cookie/domain. Add to .env file.
# CSRF_COOKIE_DOMAIN = env.str('CSRF_COOKIE_DOMAIN', default=None)

# # https://docs.djangoproject.com/en/4.2/ref/settings/#csrf-trusted-origins
# CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

# # Whether to HTTP Only. False by default.
# CSRF_COOKIE_HTTPONLY = env.bool('CSRF_COOKIE_HTTPONLY', default=False)
# CSRF_COOKIE_MASKED = env.bool('CSRF_COOKIE_MASKED', default=False)
# CSRF_COOKIE_NAME = env.str('CSRF_COOKIE_NAME', default='csrftoken')
# CSRF_COOKIE_PATH = env.str('CSRF_COOKIE_PATH', default='/')

# # See SESSION_COOKIE_SAMESITE flag for more info. Prevents X-Site requests.
# CSRF_COOKIE_SAMESITE = env.str('CSRF_COOKIE_SAMESITE', default='Lax')
# CSRF_COOKIE_SECURE = env.bool('CSRF_COOKIE_SECURE', default=True)
# CSRF_HEADER_NAME = env.str('CSRF_HEADER_NAME', default='HTTP_X_CSRFTOKEN')

# # CSRF Session Management
# # 1: Default Error Views: Session Middleware before other middleware
# CSRF_USE_SESSIONS = env.bool('CSRF_USE_SESSIONS', default=False)

# Failure Views: dotted path.
# https://docs.djangoproject.com/en/4.2/ref/settings/#csrf-failure-view
# CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# from iptools import IpRangeList
