# ==============================POETRY IS NOT USED==============================
################################ RUFF ##############################
[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "I", "D", "YTT", "PL", "T20", "RSE", "RET", "SIM", "TID",
    "TCH", "ARG", "PTH", "S", "ANN", "B"]
ignore = [
    "D205",
    "D106",
    "D415",
    "ANN001",
    "ANN201",
    "F811",
    "F405",
    "S101",
    "S105",
    "T201",
    "PLR0913",
]

# Ignoreing D106: Missing docstring in public nested class.
# Ignoreing D205: 1 blank line required between summary line and description.
# Ignoreing D415: First line should end with a period.

# Allow autofix for contact enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W",
    "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN",
    "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET",
    "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []
fix-only = true
show-fixes = true
show-source = true
#fix = true
format = "grouped"
respect-gitignore = true
# Tags
task-tags = ["TODO", "FIXME", "todo", "fixme", "CHECK", "check", "note", "added", "update", "noted"]

src = ['apps/*', 'dash_and_do/*']
include = ["*.py"]
ignore-init-module-imports = true
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# Per File

extend-exclude = [
    "apps/kore/migrations/**",
    "apps/kore/featrures/**",
    "apps\\kore\\migrations\\**",
    "apps\\kore\\featrures\\**",
]
# Same as Black.
line-length = 79

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"


[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.ruff.per-file-ignores]

[tool.ruff.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = true
mypy-init-return = false
suppress-dummy-args = false
suppress-none-returning = false
#
[tool.ruff.flake8-bandit]
check-typed-exception = false
#hardcoded-tmp-directory = []
#extend-hardcoded-tmp-directory = [""]
#
[tool.ruff.flake8-bugbear]
#extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]
#
[tool.ruff.flake8-builtins]
#builtins-ignorelist = [""]
[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true
#
[tool.ruff.flake8-errmsg]
max-string-length = 20
#
[tool.ruff.flake8-gettext]
#extend-function-names = ["ugettetxt"]
#function-names = ["_", "gettext", "ngettext", "ugettetxt"]
[tool.ruff.flake8-implicit-str-concat]
#setting allow-multiline = false should
#typically be coupled with disabling explicit-string-concatenation
allow-multiline = true
[tool.ruff.flake8-import-conventions]
[tool.ruff.flake8-import-conventions.aliases]
# Declare the default aliases.
# Declare the banned aliases.
# Declare the banned `from` imports.
# Declare a custom alias for the `matplotlib` module
[tool.ruff.flake8-pytest-style]
#fixture-parentheses = true
#mark-parentheses = true
#parametrize-names-type = "list"
#parametrize-values-row-type = "list"
#parametrize-values-type = "list"
#raises-extend-require-match-for = ["requests.RequestException"]
#raises-require-match-for = ["requests.RequestException"]

[tool.ruff.flake8-quotes]
avoid-escape = false
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "single"
[tool.ruff.flake8-self]
#ignore-names = ["_new"]
[tool.ruff.flake8-tidy-imports]
#ban-relative-imports = "contact"
[tool.ruff.flake8-tidy-imports.banned-api]
[tool.ruff.flake8-type-checking]
#exempt-modules = ["typing", "typing_extensions"]
#runtime-evaluated-base-classes = ["pydantic.BaseModel"]
#runtime-evaluated-decorators = ["attrs.define", "attrs.frozen"]
strict = false
[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true
[tool.ruff.isort]
#classes = ["SVC"]
#constants = ["constant"]
#variables = ["VAR"]
#extra-standard-library = ["path"]
force-single-line = true
force-sort-within-sections = true
#force-to-top = ["src"]
#forced-separate = ["tests"]
force-wrap-aliases = true
combine-as-imports = true
known-first-party = ["src"]
#known-local-folder = ["src"]
#known-third-party = ["src"] # TODO: Add contact third-party packages for packages.
#lines-after-imports = 1
lines-between-types = 1
#no-lines-before = ["future", "standard-library","third-party","first-party","local-folder","str"]
order-by-type = true
#relative-imports-order = "closest-to-furthest
#required-imports = ["from __future__ import annotations"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
#single-line-exclusions = ["os", "json"]
split-on-trailing-comma = true
#[tool.ruff.isort.sections]
# Group contact * imports into a/own/separate section.
[tool.ruff.pep8-naming]
#classmethod-decorators = ["pydantic.validator"]
#ignore-names = [""]
#staticmethod-decorators = ["stcmthd"]
[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100
[tool.ruff.pydocstyle]
convention = "google"
#ignore-decorators = ["typing.overload"]
#property-decorators = ["gi.repository.GObject.Property"]
[tool.ruff.pylint]
#allow-magic-value-types = ["int"]
#Type: list["str" | "bytes" | "complex" | "float" | "int" | "tuple"]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50
[tool.ruff.pyupgrade]
keep-runtime-typing = true

############################ RUFF /END ##############################

############################ PLYLINT /START #########################
[tool.pylint.MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
#extension-pkg-whitelist=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore = "CVS"

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
#ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs = 1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results = 100

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
#load-plugins=[""]

# Pickle collected data for later comparisons.
persistent = "yes"

# Specify a configuration file.
#rcfile=

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = "yes"

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = "no"

[tool.pylint.MESSAGES_CONTROL]

disable = [
#    "print-statement",
#    "parameter-unpacking",
#    "unpacking-in-except",
#    "old-raise-syntax",
#    "backtick",
#    "long-suffix",
#    "old-ne-operator",
#    "old-octal-literal",
#    "import-star-module-level",
#    "non-ascii-bytes-literal",
#    "raw-checker-failed",
#    "bad-inline-option",
#    "locally-disabled",
#    "file-ignored",
#    "suppressed-message",
#    "useless-suppression",
#    "deprecated-pragma",
#    "use-symbolic-message-instead",
#    "apply-builtin",
#    "basestring-builtin",
#    "buffer-builtin",
#    "cmp-builtin",
#    "coerce-builtin",
#    "execfile-builtin",
#    "file-builtin",
#    "long-builtin",
#    "raw_input-builtin",
#    "reduce-builtin",
#    "standarderror-builtin",
#    "unicode-builtin",
#    "xrange-builtin",
#    "coerce-method",
#    "delslice-method",
#    "getslice-method",
#    "setslice-method",
#    "no-absolute-import",
#    "old-division",
#    "dict-iter-method",
#    "dict-view-method",
#    "next-method-called",
#    "metaclass-assignment",
#    "indexing-exception",
#    "raising-string",
#    "reload-builtin",
#    "oct-method",
#    "hex-method",
#    "nonzero-method",
#    "cmp-method",
#    "input-builtin",
#    "round-builtin",
#    "intern-builtin",
#    "unichr-builtin",
#    "map-builtin-not-iterating",
#    "zip-builtin-not-iterating",
#    "range-builtin-not-iterating",
#    "filter-builtin-not-iterating",
#    "using-cmp-argument",
#    "eq-without-hash",
#    "div-method",
#    "idiv-method",
#    "rdiv-method",
#    "exception-message-attribute",
#    "invalid-str-codec",
#    "sys-max-int",
#    "bad-python3-import",
#    "deprecated-string-function",
#    "deprecated-str-translate-call",
#    "deprecated-itertools-function",
#    "deprecated-types-field",
#    "next-method-defined",
#    "dict-items-not-iterating",
#    "dict-keys-not-iterating",
#    "dict-values-not-iterating",
    #    "deprecated-operator-function",
    #    "deprecated-urllib-function",
#    "xreadlines-attribute",
    #    "deprecated-sys-function",
#    "exception-escape",
#    "comprehension-escape"
]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable = ["c-extension-no-member"]

[tool.pylint.REPORTS]
# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
#evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = ["text", "colorized"]

# Tells whether to display a full report or only the messages.
reports = "no"

# Activate the evaluation score.
score = "yes"

[tool.pylint.REFACTORS]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions = ["sys.exit"]

[tool.pylint.VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
#additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = "yes"

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = ["cb_",
    "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx = ["_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"]

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names = ["_.*|^ignored_|^unused_"]

# Tells whether we should check for unused import in __init__ files.
init-import = "no"

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]

[tool.pylint.BASIC]

# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Regular expression matching correct argument names. Overrides argument-
# naming-style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Regular expression matching correct attribute names. Overrides attr-naming-
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names = []

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style.
#class-attribute-rgx=

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Regular expression matching correct class names. Overrides class-naming-
# style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Regular expression matching correct constant names. Overrides const-naming-
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = -1

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Regular expression matching correct function names. Overrides function-
# naming-style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
#good-names=["i",
#           "j",
#           "k",
#           "ex",
#           "Run",
#           "_"]

# Include a hint for the correct naming format with invalid-name.
include-naming-hint = "yes"

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Regular expression matching correct method names. Overrides method-naming-
# style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style = "snake_case"

# Regular expression matching correct module names. Overrides module-naming-
# style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
#name-group=[]

# Regular expression which should only match function or class names that do
# not require a docstring.
#no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes = "abc.abstractproperty"

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

# Regular expression matching correct variable names. Overrides variable-
# naming-style.
#variable-rgx=

[tool.pylint.SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package..
#spelling-dict=

# List of comma separated words that should not be checked.
#spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
#spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words = "yes"

[tool.pylint.TYPECHECK]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = "contextlib.contextmanager"

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
#generated-members=

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members = "yes"

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none = "yes"

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference = "yes"

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
#ignored-classes=["optparse.Values","thread._local","_thread._local"]

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
#ignored-modules=

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint = "yes"

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

[tool.pylint.FORMAT]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = "LF"

# Regexp for a line that is allowed to be longer than the limit.
#ignore-long-lines = "^\s*(# )?<?https?://\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = '    '

# Maximum number of characters on a single line.
max-line-length = 80

# Maximum number of lines in a module.
max-module-lines = 1200

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
#no-space-check=["trailing-comma","dict-separator"]

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt = "no"

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = "no"

[tool.pylint.LOGGING]

# Format style used to check logging format string. `old` means using %
# formatting, while `new` is for `{}` formatting.
logging-format-style = "old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = "logging"

[tool.pylint.DESIGN]
# Maximum number of arguments for function / method.
max-args = 8
# Maximum number of attributes for a class (see R0902).
max-attributes = 8
# Maximum number of boolean expressions in an if statement.
max-bool-expr = 5
# Maximum number of branch for function / method body.
max-branches = 12
# Maximum number of locals for function / method body.
max-locals = 15
# Maximum number of parents for a class (see R0901).
max-parents = 7
# Maximum number of public methods for a class (see R0904).
max-public-methods = 20
# Maximum number of return / yield for function / method body.
max-returns = 6
# Maximum number of statements in function / method body.
max-statements = 50
# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME",
    "XXX",
    "TODO",
    "CHECK",
    "UPDATE"]
[tool.pylint.SIMILARITIES]

# Ignore comments when computing similarities.
ignore-comments = "yes"

# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"

# Ignore imports when computing similarities.
ignore-imports = "no"

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.IMPORTS]

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all = "no"

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = "no"

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules = ["optparse,tkinter.tix"]

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled).
ext-import-graph = ""

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled).
import-graph = ""

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled).
int-import-graph = ""

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library = ""

# Force import order to recognize a module as part of a third party library.
known-third-party = "enchant"

[tool.pylint.CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = """
                        __init__,
                        __new__,
                        setUp
                    """
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = """
                    _asdict,
                  _fields,
                  _replace,
                  _source,
                  _make
                """

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = "cls"

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.EXCEPTIONS]



############################ PYLINT /END ############################

############################ CURLYLINY ##############################

#[tool.curlylint]
#include = '\.(html|jinja|tpl|txt)$'
#
#[tool.curlylint.rules]
#indent = 4
#html_has_lang = 'en-GB'
#
## All role attributes must be valid.
## See https://www.curlylint.org/docs/rules/aria_role.
#aria_role = true
## Forms cannot be rendered with as_table, as_ul, or as_p
## See https://www.curlylint.org/docs/rules/django_forms_rendering.
#django_forms_rendering = true
## The `lang` attribute must be present.
## See https://www.curlylint.org/docs/rules/html_has_lang.
#html_has_lang = ["en", "en-US", "en-GB"]
## The `alt` attribute must be present.
## See https://www.curlylint.org/docs/rules/image_alt.
#image_alt = true
## Use tabs.
## See https://www.curlylint.org/docs/rules/indent.
#indent = 4
## `user-scalable=no` must not be used, and `maximum-scale` should be 2 or above.
## See https://www.curlylint.org/docs/rules/meta_viewport.
#meta_viewport = true
## The `autofocus` attribute must not be used.
## See https://www.curlylint.org/docs/rules/no_autofocus.
#no_autofocus = true
## Avoid positive `tabindex` values, change the order of elements on the page instead.
## See https://www.curlylint.org/docs/rules/tabindex_no_positive.
#tabindex_no_positive = true
