/*
! tailwindcss v3.3.3 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
    box-sizing: border-box;
    /* 1 */
    border-width: 0;
    /* 2 */
    border-style: solid;
    /* 2 */
    border-color: #e5e7eb;
    /* 2 */
}

::before,
::after {
    --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
*/

html {
    font-family: Inter, sans-serif;
    /* 1 */
    line-height: 1.5;
    /* 2 */
    -moz-tab-size: 4;
    /* 3 */
    tab-size: 4;
    /* 3 */
    -webkit-text-size-adjust: 100%;
    /* 4 */
    font-feature-settings: normal;
    /* 5 */
    font-variation-settings: normal;
    /* 6 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
    line-height: inherit;
    /* 1 */
    margin: 0;
    /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
    height: 0;
    /* 1 */
    color: inherit;
    /* 2 */
    border-top-width: 1px;
    /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
    font-size: inherit;
    font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
    text-decoration: inherit;
    color: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
    font-weight: bolder;
}

/*
1. Use the user's configured `mono` font family by default.
2. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
    /* 1 */
    font-size: 1em;
    /* 2 */
}

/*
Add the correct font size in all browsers.
*/

small {
    font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sub {
    bottom: -0.25em;
}

sup {
    top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
    border-collapse: collapse;
    /* 1 */
    text-indent: 0;
    /* 2 */
    border-color: inherit;
    /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
    font-family: inherit;
    /* 1 */
    font-size: 100%;
    /* 1 */
    font-weight: inherit;
    /* 1 */
    line-height: inherit;
    /* 1 */
    margin: 0;
    /* 1 */
    padding: 0;
    /* 1 */
    color: inherit;
    /* 1 */
    font-feature-settings: inherit;
    /* 2 */
    font-variation-settings: inherit;
    /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
    text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
    background-color: transparent;
    /* 1 */
    background-image: none;
    /* 2 */
    -webkit-appearance: button;
    /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
    outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
    box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
    vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
    height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
    outline-offset: -2px;
    /* 1 */
    -webkit-appearance: textfield;
    /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
    -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
    font: inherit;
    /* 1 */
    -webkit-appearance: button;
    /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
    display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
    margin: 0;
}

fieldset {
    margin: 0;
    padding: 0;
}

legend {
    padding: 0;
}

ol,
ul,
menu {
    margin: 0;
    padding: 0;
    list-style: none;
}

/*
Reset default styling for dialogs.
*/

dialog {
    padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
    resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::placeholder,
textarea::placeholder {
    opacity: 1;
    /* 1 */
    color: #9ca3af;
    /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role='button'] {
    cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
    cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
    display: block;
    /* 1 */
    vertical-align: middle;
    /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
    max-width: 100%;
    height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden] {
    display: none;
}

*,
::before,
::after {
    --tw-border-spacing-x: 0;
    --tw-border-spacing-y: 0;
    --tw-translate-x: 0;
    --tw-translate-y: 0;
    --tw-rotate: 0;
    --tw-skew-x: 0;
    --tw-skew-y: 0;
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    --tw-pan-x: ;
    --tw-pan-y: ;
    --tw-pinch-zoom: ;
    --tw-scroll-snap-strictness: proximity;
    --tw-gradient-from-position: ;
    --tw-gradient-via-position: ;
    --tw-gradient-to-position: ;
    --tw-ordinal: ;
    --tw-slashed-zero: ;
    --tw-numeric-figure: ;
    --tw-numeric-spacing: ;
    --tw-numeric-fraction: ;
    --tw-ring-inset: ;
    --tw-ring-offset-width: 0px;
    --tw-ring-offset-color: #ffffff;
    --tw-ring-color: rgb(59 130 246 / 0.5);
    --tw-ring-offset-shadow: 0 0 #0000;
    --tw-ring-shadow: 0 0 #0000;
    --tw-shadow: 0 0 #0000;
    --tw-shadow-colored: 0 0 #0000;
    --tw-blur: ;
    --tw-brightness: ;
    --tw-contrast: ;
    --tw-grayscale: ;
    --tw-hue-rotate: ;
    --tw-invert: ;
    --tw-saturate: ;
    --tw-sepia: ;
    --tw-drop-shadow: ;
    --tw-backdrop-blur: ;
    --tw-backdrop-brightness: ;
    --tw-backdrop-contrast: ;
    --tw-backdrop-grayscale: ;
    --tw-backdrop-hue-rotate: ;
    --tw-backdrop-invert: ;
    --tw-backdrop-opacity: ;
    --tw-backdrop-saturate: ;
    --tw-backdrop-sepia: ;
}

::backdrop {
    --tw-border-spacing-x: 0;
    --tw-border-spacing-y: 0;
    --tw-translate-x: 0;
    --tw-translate-y: 0;
    --tw-rotate: 0;
    --tw-skew-x: 0;
    --tw-skew-y: 0;
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    --tw-pan-x: ;
    --tw-pan-y: ;
    --tw-pinch-zoom: ;
    --tw-scroll-snap-strictness: proximity;
    --tw-gradient-from-position: ;
    --tw-gradient-via-position: ;
    --tw-gradient-to-position: ;
    --tw-ordinal: ;
    --tw-slashed-zero: ;
    --tw-numeric-figure: ;
    --tw-numeric-spacing: ;
    --tw-numeric-fraction: ;
    --tw-ring-inset: ;
    --tw-ring-offset-width: 0px;
    --tw-ring-offset-color: #ffffff;
    --tw-ring-color: rgb(59 130 246 / 0.5);
    --tw-ring-offset-shadow: 0 0 #0000;
    --tw-ring-shadow: 0 0 #0000;
    --tw-shadow: 0 0 #0000;
    --tw-shadow-colored: 0 0 #0000;
    --tw-blur: ;
    --tw-brightness: ;
    --tw-contrast: ;
    --tw-grayscale: ;
    --tw-hue-rotate: ;
    --tw-invert: ;
    --tw-saturate: ;
    --tw-sepia: ;
    --tw-drop-shadow: ;
    --tw-backdrop-blur: ;
    --tw-backdrop-brightness: ;
    --tw-backdrop-contrast: ;
    --tw-backdrop-grayscale: ;
    --tw-backdrop-hue-rotate: ;
    --tw-backdrop-invert: ;
    --tw-backdrop-opacity: ;
    --tw-backdrop-saturate: ;
    --tw-backdrop-sepia: ;
}

.container {
    width: 100%;
}

@media (min-width: 640px) {
    .container {
        max-width: 640px;
    }
}

@media (min-width: 768px) {
    .container {
        max-width: 768px;
    }
}

@media (min-width: 1024px) {
    .container {
        max-width: 1024px;
    }
}

@media (min-width: 1280px) {
    .container {
        max-width: 1280px;
    }
}

@media (min-width: 1536px) {
    .container {
        max-width: 1536px;
    }
}

#app :is(.sr-only) {
    position: absolute;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    white-space: nowrap;
    border-width: 0;
}

#app :is(.visible) {
    visibility: visible;
}

#app :is(.invisible) {
    visibility: hidden;
}

#app :is(.collapse) {
    visibility: collapse;
}

#app :is(.static) {
    position: static;
}

#app :is(.fixed) {
    position: fixed;
}

#app :is(.absolute) {
    position: absolute;
}

#app :is(.relative) {
    position: relative;
}

#app :is(.sticky) {
    position: sticky;
}

#app :is(.left-0) {
    left: 0px;
}

#app :is(.right-0) {
    right: 0px;
}

#app :is(.top-0) {
    top: 0px;
}

#app :is(.top-3) {
    top: 0.75rem;
}

#app :is(.z-10) {
    z-index: 10;
}

#app :is(.z-50) {
    z-index: 50;
}

#app :is(.mx-2) {
    margin-right: 0.5rem;
    margin-left: 0.5rem;
}

#app :is(.mx-6) {
    margin-right: 1.5rem;
    margin-left: 1.5rem;
}

#app :is(.mx-auto) {
    margin-right: auto;
    margin-left: auto;
}

#app :is(.mb-0) {
    margin-bottom: 0px;
}

#app :is(.mb-2) {
    margin-bottom: 0.5rem;
}

#app :is(.mr-6) {
    margin-right: 1.5rem;
}

#app :is(.mt-20) {
    margin-top: 5rem;
}

#app :is(.block) {
    display: block;
}

#app :is(.flex) {
    display: flex;
}

#app :is(.table) {
    display: table;
}

#app :is(.grid) {
    display: grid;
}

#app :is(.contents) {
    display: contents;
}

#app :is(.hidden) {
    display: none;
}

#app :is(.h-0) {
    height: 0px;
}

#app :is(.h-10) {
    height: 2.5rem;
}

#app :is(.h-12) {
    height: 3rem;
}

#app :is(.h-16) {
    height: 4rem;
}

#app :is(.h-24) {
    height: 6rem;
}

#app :is(.h-48) {
    height: 12rem;
}

#app :is(.h-8) {
    height: 2rem;
}

#app :is(.h-auto) {
    height: auto;
}

#app :is(.h-fit) {
    height: -moz-fit-content;
    height: fit-content;
}

#app :is(.h-full) {
    height: 100%;
}

#app :is(.h-screen) {
    height: 100vh;
}

#app :is(.min-h-\[300px\]) {
    min-height: 300px;
}

#app :is(.w-1) {
    width: 0.25rem;
}

#app :is(.w-12) {
    width: 3rem;
}

#app :is(.w-16) {
    width: 4rem;
}

#app :is(.w-2) {
    width: 0.5rem;
}

#app :is(.w-20) {
    width: 5rem;
}

#app :is(.w-4) {
    width: 1rem;
}

#app :is(.w-64) {
    width: 16rem;
}

#app :is(.w-auto) {
    width: auto;
}

#app :is(.w-full) {
    width: 100%;
}

#app :is(.min-w-fit) {
    min-width: -moz-fit-content;
    min-width: fit-content;
}

#app :is(.flex-1) {
    flex: 1 1 0%;
}

#app :is(.flex-shrink) {
    flex-shrink: 1;
}

#app :is(.flex-shrink-0) {
    flex-shrink: 0;
}

#app :is(.shrink) {
    flex-shrink: 1;
}

#app :is(.border-collapse) {
    border-collapse: collapse;
}

#app :is(.-translate-x-full) {
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-translate-x: -100%;
}

#app :is(.translate-x-0) {
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-translate-x: 0px;
}

#app :is(.transform) {
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

#app :is(.resize) {
    resize: both;
}

#app :is(.grid-cols-1) {
    grid-template-columns: repeat(1, minmax(0, 1fr));
}

#app :is(.grid-cols-2) {
    grid-template-columns: repeat(2, minmax(0, 1fr));
}

#app :is(.grid-cols-3) {
    grid-template-columns: repeat(3, minmax(0, 1fr));
}

#app :is(.flex-row) {
    flex-direction: row;
}

#app :is(.flex-col) {
    flex-direction: column;
}

#app :is(.flex-col-reverse) {
    flex-direction: column-reverse;
}

#app :is(.flex-wrap) {
    flex-wrap: wrap;
}

#app :is(.content-center) {
    align-content: center;
}

#app :is(.items-center) {
    align-items: center;
}

#app :is(.justify-start) {
    justify-content: flex-start;
}

#app :is(.justify-end) {
    justify-content: flex-end;
}

#app :is(.justify-center) {
    justify-content: center;
}

#app :is(.justify-between) {
    justify-content: space-between;
}

#app :is(.gap-6) {
    gap: 1.5rem;
}

#app :is(.space-x-10 > :not([hidden]) ~ :not([hidden])) {
    margin-right: calc(2.5rem * var(--tw-space-x-reverse));
    margin-left: calc(2.5rem * calc(1 - var(--tw-space-x-reverse)));
    --tw-space-x-reverse: 0;
}

#app :is(.space-x-4 > :not([hidden]) ~ :not([hidden])) {
    margin-right: calc(1rem * var(--tw-space-x-reverse));
    margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));
    --tw-space-x-reverse: 0;
}

#app :is(.space-y-0 > :not([hidden]) ~ :not([hidden])) {
    margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));
    margin-bottom: calc(0px * var(--tw-space-y-reverse));
    --tw-space-y-reverse: 0;
}

#app :is(.space-y-1 > :not([hidden]) ~ :not([hidden])) {
    margin-top: calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));
    margin-bottom: calc(0.25rem * var(--tw-space-y-reverse));
    --tw-space-y-reverse: 0;
}

#app :is(.space-y-10 > :not([hidden]) ~ :not([hidden])) {
    margin-top: calc(2.5rem * calc(1 - var(--tw-space-y-reverse)));
    margin-bottom: calc(2.5rem * var(--tw-space-y-reverse));
    --tw-space-y-reverse: 0;
}

#app :is(.space-y-4 > :not([hidden]) ~ :not([hidden])) {
    margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
    margin-bottom: calc(1rem * var(--tw-space-y-reverse));
    --tw-space-y-reverse: 0;
}

#app :is(.overflow-auto) {
    overflow: auto;
}

#app :is(.rounded-md) {
    border-radius: 0.375rem;
}

#app :is(.border) {
    border-width: 1px;
}

#app :is(.bg-blue-500) {
    background-color: rgb(59 130 246 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-blue-800) {
    background-color: rgb(30 64 175 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-gray-200) {
    background-color: rgb(229 231 235 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-gray-300) {
    background-color: rgb(209 213 219 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-gray-400) {
    background-color: rgb(156 163 175 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-gray-500) {
    background-color: rgb(107 114 128 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-gray-600) {
    background-color: rgb(75 85 99 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-gray-800) {
    background-color: rgb(31 41 55 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-green-800) {
    background-color: rgb(22 101 52 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.bg-slate-300) {
    background-color: rgb(203 213 225 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

#app :is(.object-cover) {
    object-fit: cover;
}

#app :is(.p-3) {
    padding: 0.75rem;
}

#app :is(.p-4) {
    padding: 1rem;
}

#app :is(.px-10) {
    padding-right: 2.5rem;
    padding-left: 2.5rem;
}

#app :is(.px-2) {
    padding-right: 0.5rem;
    padding-left: 0.5rem;
}

#app :is(.px-3) {
    padding-right: 0.75rem;
    padding-left: 0.75rem;
}

#app :is(.px-4) {
    padding-right: 1rem;
    padding-left: 1rem;
}

#app :is(.px-6) {
    padding-right: 1.5rem;
    padding-left: 1.5rem;
}

#app :is(.py-0) {
    padding-top: 0px;
    padding-bottom: 0px;
}

#app :is(.py-10) {
    padding-top: 2.5rem;
    padding-bottom: 2.5rem;
}

#app :is(.py-2) {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}

#app :is(.py-3) {
    padding-top: 0.75rem;
    padding-bottom: 0.75rem;
}

#app :is(.py-4) {
    padding-top: 1rem;
    padding-bottom: 1rem;
}

#app :is(.py-8) {
    padding-top: 2rem;
    padding-bottom: 2rem;
}

#app :is(.pb-0) {
    padding-bottom: 0px;
}

#app :is(.pb-20) {
    padding-bottom: 5rem;
}

#app :is(.pb-4) {
    padding-bottom: 1rem;
}

#app :is(.text-center) {
    text-align: center;
}

#app :is(.text-base) {
    font-size: 1rem;
    line-height: 1.5rem;
}

#app :is(.text-xl) {
    font-size: 1.25rem;
    line-height: 1.75rem;
}

#app :is(.font-medium) {
    font-weight: 500;
}

#app :is(.font-semibold) {
    font-weight: 600;
}

#app :is(.tracking-tight) {
    letter-spacing: -0.025em;
}

#app :is(.text-gray-300) {
    color: rgb(209 213 219 / var(--tw-text-opacity));
    --tw-text-opacity: 1;
}

#app :is(.text-white) {
    color: rgb(255 255 255 / var(--tw-text-opacity));
    --tw-text-opacity: 1;
}

#app :is(.underline) {
    text-decoration-line: underline;
}

#app :is(.opacity-0) {
    opacity: 0;
}

#app :is(.outline) {
    outline-style: solid;
}

#app :is(.blur) {
    --tw-blur: blur(8px);
    filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#app :is(.filter) {
    filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#app :is(.transition) {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    transition-property: color,
    background-color,
    border-color,
    text-decoration-color,
    fill,
    stroke,
    opacity,
    box-shadow,
    transform,
    filter,
    -webkit-backdrop-filter;
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow,
    transform, filter, backdrop-filter;
    transition-property: color,
    background-color,
    border-color,
    text-decoration-color,
    fill,
    stroke,
    opacity,
    box-shadow,
    transform,
    filter,
    backdrop-filter,
    -webkit-backdrop-filter;
}

#app :is(.transition-colors) {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
}

#app :is(.transition-opacity) {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    transition-property: opacity;
}

#app :is(.transition-transform) {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    transition-property: transform;
}

#app :is(.duration-200) {
    transition-duration: 200ms;
}

#app :is(.duration-500) {
    transition-duration: 500ms;
}

#app :is(.ease-in-out) {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

#app :is(.ease-out) {
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.\[a-zA-Z\:\\-\] {
    a-z-a--z: \-;
}

.header-page {
    display: flex;
    width: auto;
    height: 6rem;
}

.header-left {
    display: flex;
    align-content: center;
    justify-content: flex-start;
    width: 100%;
    min-width: -moz-fit-content;
    min-width: fit-content;
}

.header-right {
    display: flex;
    align-content: center;
    justify-content: flex-end;
    width: 100%;
    min-width: -moz-fit-content;
    min-width: fit-content;
}

.header-compose {
    flex: 1 1 0%;
}

.header-look {
    background-color: rgb(209 213 219 / var(--tw-bg-opacity));
    --tw-bg-opacity: 1;
}

/*.header-interact {*/

/*    @apply */

/*}*/

.main-page {
    width: auto;
}

.footer-page {
    width: auto;
    height: 6rem;
}

#app :is(.hover\:text-gray-200:hover) {
    color: rgb(229 231 235 / var(--tw-text-opacity));
    --tw-text-opacity: 1;
}

#app :is(.hover\:text-white:hover) {
    color: rgb(255 255 255 / var(--tw-text-opacity));
    --tw-text-opacity: 1;
}

#app :is(.focus\:not-sr-only:focus) {
    position: static;
    overflow: visible;
    clip: auto;
    width: auto;
    height: auto;
    margin: 0;
    padding: 0;
    white-space: normal;
}

@media (min-width: 640px) {
    #app :is(.sm\:h-10) {
        height: 2.5rem;
    }

    #app :is(.sm\:grid-cols-2) {
        grid-template-columns: repeat(2, minmax(0, 1fr));
    }
}

@media (min-width: 768px) {
    #app :is(.md\:mx-6) {
        margin-right: 1.5rem;
        margin-left: 1.5rem;
    }

    #app :is(.md\:mb-0) {
        margin-bottom: 0px;
    }

    #app :is(.md\:block) {
        display: block;
    }

    #app :is(.md\:flex) {
        display: flex;
    }

    #app :is(.md\:h-12) {
        height: 3rem;
    }

    #app :is(.md\:grid-cols-3) {
        grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    #app :is(.md\:flex-row) {
        flex-direction: row;
    }

    #app :is(.md\:space-x-4 > :not([hidden]) ~ :not([hidden])) {
        margin-right: calc(1rem * var(--tw-space-x-reverse));
        margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));
        --tw-space-x-reverse: 0;
    }

    #app :is(.md\:space-y-0 > :not([hidden]) ~ :not([hidden])) {
        margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));
        margin-bottom: calc(0px * var(--tw-space-y-reverse));
        --tw-space-y-reverse: 0;
    }

    #app :is(.md\:px-10) {
        padding-right: 2.5rem;
        padding-left: 2.5rem;
    }

    #app :is(.md\:px-6) {
        padding-right: 1.5rem;
        padding-left: 1.5rem;
    }

    #app :is(.md\:py-0) {
        padding-top: 0px;
        padding-bottom: 0px;
    }

    #app :is(.md\:py-8) {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
}

@media (min-width: 1024px) {
    #app :is(.lg\:sticky) {
        position: sticky;
    }

    #app :is(.lg\:block) {
        display: block;
    }

    #app :is(.lg\:flex) {
        display: flex;
    }

    #app :is(.lg\:w-1\/4) {
        width: 25%;
    }

    #app :is(.lg\:translate-x-0) {
        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
        --tw-translate-x: 0px;
    }

    #app :is(.lg\:space-x-10 > :not([hidden]) ~ :not([hidden])) {
        margin-right: calc(2.5rem * var(--tw-space-x-reverse));
        margin-left: calc(2.5rem * calc(1 - var(--tw-space-x-reverse)));
        --tw-space-x-reverse: 0;
    }

    #app :is(.lg\:space-y-0 > :not([hidden]) ~ :not([hidden])) {
        margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));
        margin-bottom: calc(0px * var(--tw-space-y-reverse));
        --tw-space-y-reverse: 0;
    }

    #app :is(.lg\:pb-4) {
        padding-bottom: 1rem;
    }
}

@media (min-width: 1280px) {
    #app :is(.xl\:w-1\/3) {
        width: 33.333333%;
    }
}
